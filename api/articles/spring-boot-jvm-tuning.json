{"title":"深入浅出 Spring Boot JVM 调优技巧","uid":"83f1970d736543012f09207d43ab0a9f","slug":"spring-boot-jvm-tuning","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/spring-boot-jvm-tuning.json","keywords":null,"cover":"https://example.com/cover-images/spring-boot-jvm-tuning.png","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在高并发、高负载的系统中，JVM 调优是确保应用性能和稳定性的重要手段。Spring Boot 应用由于其开箱即用的特性，常被忽视 JVM<br>层面的配置。本文将带你深入了解 JVM 调优的核心技巧，包括内存参数设置、垃圾回收器选择和性能监控工具的使用。</p>\n<h1 id=\"1-JVM-内存结构概述\"><a href=\"#1-JVM-内存结构概述\" class=\"headerlink\" title=\"1. JVM 内存结构概述\"></a>1. JVM 内存结构概述</h1><p>JVM 的内存结构主要包括：</p>\n<ul>\n<li><strong>堆内存（Heap）</strong>：存储对象实例，是垃圾回收的主要区域。</li>\n<li><strong>非堆内存（Non-Heap）</strong>：包括方法区、元空间和直接内存。</li>\n<li><strong>栈内存（Stack）</strong>：每个线程独享，存储局部变量和方法调用信息。</li>\n</ul>\n<p>了解这些基本概念，有助于更好地进行内存调优。</p>\n<h1 id=\"2-启动参数配置\"><a href=\"#2-启动参数配置\" class=\"headerlink\" title=\"2. 启动参数配置\"></a>2. 启动参数配置</h1><p>Spring Boot 应用可以通过配置 JVM 启动参数来优化内存使用。</p>\n<h2 id=\"2-1-常用-JVM-启动参数\"><a href=\"#2-1-常用-JVM-启动参数\" class=\"headerlink\" title=\"2.1 常用 JVM 启动参数\"></a>2.1 常用 JVM 启动参数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xms512m -Xmx1024m -Xss256k -XX:+UseG1GC -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=256m -jar your-application.jar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-Xms512m</code>：设置初始堆内存为 512MB。</li>\n<li><code>-Xmx1024m</code>：设置最大堆内存为 1024MB。</li>\n<li><code>-Xss256k</code>：设置每个线程的栈大小。</li>\n<li><code>-XX:+UseG1GC</code>：启用 G1 垃圾回收器，适用于大部分 Spring Boot 应用。</li>\n<li><code>-XX:MetaspaceSize=128m</code>：设置元空间初始大小。</li>\n<li><code>-XX:MaxMetaspaceSize=256m</code>：设置元空间最大大小。</li>\n</ul>\n<h2 id=\"2-2-根据系统负载调整参数\"><a href=\"#2-2-根据系统负载调整参数\" class=\"headerlink\" title=\"2.2 根据系统负载调整参数\"></a>2.2 根据系统负载调整参数</h2><ul>\n<li><strong>高并发场景</strong>：适当增大堆内存，调整垃圾回收参数以减少 Full GC 的频率。</li>\n<li><strong>内存敏感型应用</strong>：精细调整栈大小和元空间大小，避免 OOM 问题。</li>\n</ul>\n<h1 id=\"3-垃圾回收器选择与调优\"><a href=\"#3-垃圾回收器选择与调优\" class=\"headerlink\" title=\"3. 垃圾回收器选择与调优\"></a>3. 垃圾回收器选择与调优</h1><p>垃圾回收器（GC）的选择对应用性能有直接影响。常用的垃圾回收器包括：</p>\n<ul>\n<li><strong>Serial GC</strong>：适合小型应用，单线程回收。</li>\n<li><strong>Parallel GC</strong>：适合多核处理器，追求吞吐量。</li>\n<li><strong>G1 GC</strong>：平衡吞吐量与延迟，适合大多数 Spring Boot 应用。</li>\n<li><strong>ZGC &#x2F; Shenandoah</strong>：超低延迟回收器，适合对延迟敏感的系统（Java 11 以上支持）。</li>\n</ul>\n<h2 id=\"3-1-G1-GC-参数调优示例\"><a href=\"#3-1-G1-GC-参数调优示例\" class=\"headerlink\" title=\"3.1 G1 GC 参数调优示例\"></a>3.1 G1 GC 参数调优示例</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xms1g -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+ParallelRefProcEnabled -jar your-application.jar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>-XX:MaxGCPauseMillis=200</code>：目标最大 GC 暂停时间为 200 毫秒。</li>\n<li><code>-XX:+ParallelRefProcEnabled</code>：启用并行处理引用，提升回收效率。</li>\n</ul>\n<h1 id=\"4-性能监控工具\"><a href=\"#4-性能监控工具\" class=\"headerlink\" title=\"4. 性能监控工具\"></a>4. 性能监控工具</h1><p>监控工具能帮助我们实时掌握 JVM 的运行状态，及时发现内存泄漏和性能瓶颈。</p>\n<h2 id=\"4-1-VisualVM\"><a href=\"#4-1-VisualVM\" class=\"headerlink\" title=\"4.1 VisualVM\"></a>4.1 VisualVM</h2><p><strong>VisualVM</strong> 是 Java 官方提供的性能分析工具，可用于监控内存使用、线程活动和 GC 日志。</p>\n<h3 id=\"使用方法：\"><a href=\"#使用方法：\" class=\"headerlink\" title=\"使用方法：\"></a>使用方法：</h3><ol>\n<li>下载并启动 VisualVM。</li>\n<li>在 Spring Boot 应用中启用 JMX：</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">jmx:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用 VisualVM 连接应用，查看实时内存使用情况。</li>\n</ol>\n<h2 id=\"4-2-JConsole\"><a href=\"#4-2-JConsole\" class=\"headerlink\" title=\"4.2 JConsole\"></a>4.2 JConsole</h2><p><strong>JConsole</strong> 是 JDK 自带的轻量级监控工具，适用于快速查看 JVM 状态。</p>\n<h3 id=\"启动命令：\"><a href=\"#启动命令：\" class=\"headerlink\" title=\"启动命令：\"></a>启动命令：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jconsole</span><br></pre></td></tr></table></figure>\n\n<p>连接到运行中的 Spring Boot 应用，即可查看堆内存、线程和 GC 活动。</p>\n<h1 id=\"5-诊断与优化实践\"><a href=\"#5-诊断与优化实践\" class=\"headerlink\" title=\"5. 诊断与优化实践\"></a>5. 诊断与优化实践</h1><h2 id=\"5-1-分析-GC-日志\"><a href=\"#5-1-分析-GC-日志\" class=\"headerlink\" title=\"5.1 分析 GC 日志\"></a>5.1 分析 GC 日志</h2><p>启用 GC 日志可以帮助定位性能瓶颈。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xlog:gc*:file=gc.log:<span class=\"keyword\">time</span>,<span class=\"built_in\">uptime</span>,level -jar your-application.jar</span><br></pre></td></tr></table></figure>\n\n<p>通过日志分析工具（如 <strong>GCViewer</strong> 或 <strong>GCEasy</strong>），可以可视化 GC 活动，找出频繁 Full GC 的原因。</p>\n<h2 id=\"5-2-常见问题与解决方案\"><a href=\"#5-2-常见问题与解决方案\" class=\"headerlink\" title=\"5.2 常见问题与解决方案\"></a>5.2 常见问题与解决方案</h2><ul>\n<li><strong>频繁 Full GC</strong>：检查是否存在内存泄漏，适当增大堆内存或调整对象生命周期管理。</li>\n<li><strong>高内存占用但未释放</strong>：使用 VisualVM 进行堆快照分析，找出占用内存的对象。</li>\n</ul>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>JVM 调优是提升 Spring Boot<br>应用性能的关键步骤。通过合理配置内存参数、选择合适的垃圾回收器，并结合监控工具进行实时分析，开发者可以有效减少系统延迟，提高应用稳定性。不断的性能监控和调优，将帮助应用在生产环境中表现最佳。</p>\n","feature":true,"text":"本文详细介绍了如何针对 Spring Boot 应用进行 JVM 调优，包括内存管理、垃圾回收器选择和性能监控工具的使用，帮助开发者构建高性能、稳定的后端服务。...","permalink":"/post/spring-boot-jvm-tuning","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"性能优化","slug":"后端开发/性能优化","count":6,"path":"api/categories/后端开发/性能优化.json"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","count":11,"path":"api/tags/Spring-Boot.json"},{"name":"JVM调优","slug":"JVM调优","count":3,"path":"api/tags/JVM调优.json"},{"name":"垃圾回收","slug":"垃圾回收","count":1,"path":"api/tags/垃圾回收.json"},{"name":"内存管理","slug":"内存管理","count":1,"path":"api/tags/内存管理.json"},{"name":"性能监控","slug":"性能监控","count":1,"path":"api/tags/性能监控.json"},{"name":"Java性能","slug":"Java性能","count":1,"path":"api/tags/Java性能.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-JVM-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. JVM 内存结构概述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2. 启动参数配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%B8%B8%E7%94%A8-JVM-%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2.1 常用 JVM 启动参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD%E8%B0%83%E6%95%B4%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">2.2 根据系统负载调整参数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E9%80%89%E6%8B%A9%E4%B8%8E%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">3. 垃圾回收器选择与调优</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-G1-GC-%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3.1 G1 GC 参数调优示例</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">4. 性能监控工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-VisualVM\"><span class=\"toc-text\">4.1 VisualVM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A\"><span class=\"toc-text\">使用方法：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-JConsole\"><span class=\"toc-text\">4.2 JConsole</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%EF%BC%9A\"><span class=\"toc-text\">启动命令：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E8%AF%8A%E6%96%AD%E4%B8%8E%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">5. 诊断与优化实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E5%88%86%E6%9E%90-GC-%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">5.1 分析 GC 日志</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">5.2 常见问题与解决方案</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a></li></ol>","author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring Boot 缓存优化最佳实践","uid":"3d4b54f4308b00837c10ccdd2030998e","slug":"spring-boot-cache-optimization","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/spring-boot-cache-optimization.json","keywords":null,"cover":"https://example.com/cover-images/spring-boot-cache.png","text":"本文探讨了如何在 Spring Boot 中实现高效的缓存机制，包括缓存策略的选择、常见缓存框架的集成以及缓存性能优化技巧，帮助开发者提升系统性能。...","permalink":"/post/spring-boot-cache-optimization","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"性能优化","slug":"后端开发/性能优化","count":6,"path":"api/categories/后端开发/性能优化.json"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","count":11,"path":"api/tags/Spring-Boot.json"},{"name":"缓存策略","slug":"缓存策略","count":5,"path":"api/tags/缓存策略.json"},{"name":"性能调优","slug":"性能调优","count":2,"path":"api/tags/性能调优.json"},{"name":"Redis","slug":"Redis","count":2,"path":"api/tags/Redis.json"},{"name":"缓存优化","slug":"缓存优化","count":1,"path":"api/tags/缓存优化.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"Spring Boot 安全性最佳实践","uid":"bee3a0b89958f7a14454bab6841f8291","slug":"spring-boot-security-best-practices","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/spring-boot-security-best-practices.json","keywords":null,"cover":"https://example.com/cover-images/spring-boot-security.png","text":"本文探讨了在Spring Boot应用中实施安全性最佳实践的方法，包括认证授权机制、加密技术、防止常见安全漏洞等策略，帮助开发者构建更安全的Web应用。...","permalink":"/post/spring-boot-security-best-practices","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"安全性","slug":"后端开发/安全性","count":1,"path":"api/categories/后端开发/安全性.json"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","count":11,"path":"api/tags/Spring-Boot.json"},{"name":"安全性","slug":"安全性","count":2,"path":"api/tags/安全性.json"},{"name":"OAuth2","slug":"OAuth2","count":1,"path":"api/tags/OAuth2.json"},{"name":"JWT","slug":"JWT","count":2,"path":"api/tags/JWT.json"},{"name":"CSRF","slug":"CSRF","count":1,"path":"api/tags/CSRF.json"},{"name":"数据加密","slug":"数据加密","count":1,"path":"api/tags/数据加密.json"},{"name":"安全漏洞防护","slug":"安全漏洞防护","count":1,"path":"api/tags/安全漏洞防护.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true}}