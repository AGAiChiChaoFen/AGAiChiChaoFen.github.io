{"title":"Vue 性能优化实战","uid":"df0bd55bf5dabc088a34e9fd3d181652","slug":"vue-performance-optimization","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/vue-performance-optimization.json","keywords":null,"cover":"https://example.com/cover-images/vue-performance.png","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在现代的前端开发中，性能优化是一个至关重要的课题，尤其是对于单页面应用（SPA）来说，性能的好坏直接影响用户体验。Vue.js<br>作为一个轻量且高效的框架，其灵活性和可扩展性使得开发者可以通过多种方式进行性能优化。本文将分享一些在 Vue<br>项目中优化性能的最佳实践，并结合代码示例帮助你提升项目的响应速度和用户体验。</p>\n<h1 id=\"1-避免不必要的重渲染\"><a href=\"#1-避免不必要的重渲染\" class=\"headerlink\" title=\"1. 避免不必要的重渲染\"></a>1. 避免不必要的重渲染</h1><p>Vue.js 使用虚拟 DOM 来最小化 DOM 操作，但如果不当使用，组件的频繁重渲染仍然会带来性能问题。为了避免不必要的重渲染，你可以使用以下方法来优化组件更新。</p>\n<h2 id=\"1-1-使用-v-if-和-v-show-的技巧\"><a href=\"#1-1-使用-v-if-和-v-show-的技巧\" class=\"headerlink\" title=\"1.1 使用 v-if 和 v-show 的技巧\"></a>1.1 使用 <code>v-if</code> 和 <code>v-show</code> 的技巧</h2><p>在 Vue 中，<code>v-if</code> 和 <code>v-show</code> 都是控制元素是否渲染的指令，然而它们有不同的性能开销：</p>\n<ul>\n<li><code>v-if</code> 会根据条件动态地添加或移除 DOM 元素，适合那些频繁切换显示的元素。</li>\n<li><code>v-show</code> 仅仅是控制元素的显示和隐藏，元素始终会存在于 DOM 中，因此适合那些只需要在初次渲染后切换显示状态的场景。</li>\n</ul>\n<p>例如，如果你有一个需要频繁切换的组件，使用 <code>v-show</code> 会比 <code>v-if</code> 更高效。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 使用 v-show，避免频繁的 DOM 操作 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isVisible&quot;</span>&gt;</span>This is a visible element<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-使用-computed-和-watch-优化计算\"><a href=\"#1-2-使用-computed-和-watch-优化计算\" class=\"headerlink\" title=\"1.2 使用 computed 和 watch 优化计算\"></a>1.2 使用 <code>computed</code> 和 <code>watch</code> 优化计算</h2><p>尽量使用 <code>computed</code> 来代替 <code>methods</code>，因为 <code>computed</code> 会缓存其结果，只有在依赖的数据发生变化时才会重新计算。相对而言，<br><code>methods</code> 每次都会执行，这可能导致性能问题。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 使用 computed 缓存结果 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; filteredItems &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">items</span>: [...],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">searchQuery</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">filteredItems</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">includes</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">searchQuery</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-组件懒加载\"><a href=\"#2-组件懒加载\" class=\"headerlink\" title=\"2. 组件懒加载\"></a>2. 组件懒加载</h1><p>在大型 Vue 应用中，组件的懒加载可以显著提高页面的初次加载速度。Vue Router 支持按需加载组件，当路由被访问时，组件才会加载。</p>\n<h2 id=\"2-1-Vue-Router-组件懒加载\"><a href=\"#2-1-Vue-Router-组件懒加载\" class=\"headerlink\" title=\"2.1 Vue Router 组件懒加载\"></a>2.1 Vue Router 组件懒加载</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;home&quot; */</span> <span class=\"string\">&#x27;./components/Home.vue&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，<code>Home.vue</code> 组件只有在访问 <code>/home</code> 路由时才会被加载，从而减少了初始加载时的资源请求。</p>\n<h2 id=\"2-2-使用-Webpack-的代码分割\"><a href=\"#2-2-使用-Webpack-的代码分割\" class=\"headerlink\" title=\"2.2 使用 Webpack 的代码分割\"></a>2.2 使用 Webpack 的代码分割</h2><p>Vue 与 Webpack 配合良好，支持代码分割。通过 <code>webpackChunkName</code>，可以自定义生成的文件名，使得代码的分割更具可读性和可管理性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;about&quot; */</span> <span class=\"string\">&#x27;./components/About.vue&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这样，你可以按需加载每个页面的相关资源，避免不必要的代码加载。</p>\n<h1 id=\"3-虚拟滚动优化\"><a href=\"#3-虚拟滚动优化\" class=\"headerlink\" title=\"3. 虚拟滚动优化\"></a>3. 虚拟滚动优化</h1><p>如果你的应用中有大量的列表数据，普通的滚动会导致浏览器卡顿。虚拟滚动是一种优化技术，它通过只渲染可见的 DOM 元素来提升性能。</p>\n<h2 id=\"3-1-使用-vue-virtual-scroller-实现虚拟滚动\"><a href=\"#3-1-使用-vue-virtual-scroller-实现虚拟滚动\" class=\"headerlink\" title=\"3.1 使用 vue-virtual-scroller 实现虚拟滚动\"></a>3.1 使用 <code>vue-virtual-scroller</code> 实现虚拟滚动</h2><p><code>vue-virtual-scroller</code> 是一个流行的 Vue 插件，可以用来实现虚拟滚动。它通过动态渲染可视区域内的元素，减少了不必要的 DOM 操作。</p>\n<p>安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-virtual-scroller</span><br></pre></td></tr></table></figure>\n\n<p>使用示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">VirtualList</span> <span class=\"attr\">:items</span>=<span class=\"string\">&quot;items&quot;</span> <span class=\"attr\">:item-size</span>=<span class=\"string\">&quot;50&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot</span>=<span class=\"string\">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">VirtualList</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">import</span> &#123;<span class=\"title class_\">VirtualList</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-virtual-scroller&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>: &#123;<span class=\"title class_\">VirtualList</span>&#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">items</span>: <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(&#123;<span class=\"attr\">length</span>: <span class=\"number\">1000</span>&#125;, <span class=\"function\">(<span class=\"params\">_, i</span>) =&gt;</span> <span class=\"string\">`Item <span class=\"subst\">$&#123;i + <span class=\"number\">1</span>&#125;</span>`</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>vue-virtual-scroller</code> 可以显著减少渲染的 DOM 数量，提升长列表滚动时的性能。</p>\n<h1 id=\"4-图片优化\"><a href=\"#4-图片优化\" class=\"headerlink\" title=\"4. 图片优化\"></a>4. 图片优化</h1><p>图片是 Web 性能优化的一个重点，尤其是在移动端，图片加载的速度和流量消耗可能成为瓶颈。你可以通过懒加载、合适的格式和大小来优化图片的加载。</p>\n<h2 id=\"4-1-使用-v-lazy-实现图片懒加载\"><a href=\"#4-1-使用-v-lazy-实现图片懒加载\" class=\"headerlink\" title=\"4.1 使用 v-lazy 实现图片懒加载\"></a>4.1 使用 <code>v-lazy</code> 实现图片懒加载</h2><p>使用 <code>v-lazy</code> 指令可以在图片滚动到视口时再进行加载，避免初始加载时浪费带宽。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-lazy</span>=<span class=\"string\">&quot;imageUrl&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;lazy image&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install vue-lazyload</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>main.js</code> 中配置：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueLazyload</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-lazyload&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueLazyload</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-使用适当的图片格式和尺寸\"><a href=\"#4-2-使用适当的图片格式和尺寸\" class=\"headerlink\" title=\"4.2 使用适当的图片格式和尺寸\"></a>4.2 使用适当的图片格式和尺寸</h2><p>对于不同的显示设备和屏幕分辨率，使用合适的图片格式和尺寸至关重要。你可以使用 <code>srcset</code> 属性根据不同的屏幕尺寸加载不同分辨率的图片。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">src</span>=<span class=\"string\">&quot;image-small.jpg&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">srcset</span>=<span class=\"string\">&quot;image-large.jpg 1200w, image-medium.jpg 800w&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">alt</span>=<span class=\"string\">&quot;responsive image&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><p>Vue 的性能优化需要从多个方面入手，包括减少不必要的重渲染、组件懒加载、虚拟滚动以及图片优化等。通过合理使用这些技术，你可以大大提高<br>Vue 应用的性能，提升用户体验。希望本文的技巧和实践能够帮助你更高效地优化你的 Vue 项目。</p>\n","feature":true,"text":"本文深入探讨了在 Vue.js 项目中如何优化性能，涵盖了组件懒加载、虚拟滚动、避免不必要的重渲染等技巧，并提供了具体的代码示例。...","permalink":"/post/vue-performance-optimization","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"前端开发","slug":"前端开发","count":4,"path":"api/categories/前端开发.json"},{"name":"性能优化","slug":"前端开发/性能优化","count":2,"path":"api/categories/前端开发/性能优化.json"}],"tags":[{"name":"性能优化","slug":"性能优化","count":7,"path":"api/tags/性能优化.json"},{"name":"Vue.js","slug":"Vue-js","count":2,"path":"api/tags/Vue-js.json"},{"name":"组件懒加载","slug":"组件懒加载","count":1,"path":"api/tags/组件懒加载.json"},{"name":"虚拟滚动","slug":"虚拟滚动","count":1,"path":"api/tags/虚拟滚动.json"},{"name":"重渲染","slug":"重渲染","count":1,"path":"api/tags/重渲染.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E9%81%BF%E5%85%8D%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E9%87%8D%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">1. 避免不必要的重渲染</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E4%BD%BF%E7%94%A8-v-if-%E5%92%8C-v-show-%E7%9A%84%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">1.1 使用 v-if 和 v-show 的技巧</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E4%BD%BF%E7%94%A8-computed-%E5%92%8C-watch-%E4%BC%98%E5%8C%96%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">1.2 使用 computed 和 watch 优化计算</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E7%BB%84%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">2. 组件懒加载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-Vue-Router-%E7%BB%84%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">2.1 Vue Router 组件懒加载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E4%BD%BF%E7%94%A8-Webpack-%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2\"><span class=\"toc-text\">2.2 使用 Webpack 的代码分割</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E8%99%9A%E6%8B%9F%E6%BB%9A%E5%8A%A8%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">3. 虚拟滚动优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E4%BD%BF%E7%94%A8-vue-virtual-scroller-%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%BB%9A%E5%8A%A8\"><span class=\"toc-text\">3.1 使用 vue-virtual-scroller 实现虚拟滚动</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">4. 图片优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E4%BD%BF%E7%94%A8-v-lazy-%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">4.1 使用 v-lazy 实现图片懒加载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E4%BD%BF%E7%94%A8%E9%80%82%E5%BD%93%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E5%92%8C%E5%B0%BA%E5%AF%B8\"><span class=\"toc-text\">4.2 使用适当的图片格式和尺寸</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5. 总结</span></a></li></ol>","author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"深入了解域名与 DNS 解析","uid":"8a1250f1005d9e4eb101ffb4ef50588b","slug":"understanding-domain-names-and-dns-resolution","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/understanding-domain-names-and-dns-resolution.json","keywords":null,"cover":"https://example.com/cover-images/dns-resolution.png","text":"本文深入介绍了域名的基本概念、DNS（域名系统）的工作原理，以及如何进行域名解析，帮助开发者和网络工程师更好地理解 DNS 在互联网中的作用。...","permalink":"/post/understanding-domain-names-and-dns-resolution","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"网络技术","slug":"网络技术","count":1,"path":"api/categories/网络技术.json"},{"name":"域名解析","slug":"网络技术/域名解析","count":1,"path":"api/categories/网络技术/域名解析.json"},{"name":"DNS","slug":"网络技术/域名解析/DNS","count":1,"path":"api/categories/网络技术/域名解析/DNS.json"}],"tags":[{"name":"网络协议","slug":"网络协议","count":2,"path":"api/tags/网络协议.json"},{"name":"域名","slug":"域名","count":1,"path":"api/tags/域名.json"},{"name":"DNS","slug":"DNS","count":1,"path":"api/tags/DNS.json"},{"name":"域名解析","slug":"域名解析","count":1,"path":"api/tags/域名解析.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"基于Spring Boot与Vue.js实现完整的用户认证与授权系统","uid":"28ffae9a33ce006917ae81ba1754fba4","slug":"spring-boot-vue-jwt-authentication","date":"2024-01-30T16:00:00.000Z","updated":"2024-01-30T16:00:00.000Z","comments":true,"path":"api/articles/spring-boot-vue-jwt-authentication.json","keywords":null,"cover":"https://example.com/cover-images/authentication-system.png","text":"本文将介绍如何使用Spring Boot与Vue.js构建一个完整的用户认证与授权系统，包括用户注册、登录、JWT认证、角色权限管理等功能的实现。...","permalink":"/post/spring-boot-vue-jwt-authentication","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"全栈开发","slug":"全栈开发","count":2,"path":"api/categories/全栈开发.json"},{"name":"安全性","slug":"全栈开发/安全性","count":1,"path":"api/categories/全栈开发/安全性.json"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","count":11,"path":"api/tags/Spring-Boot.json"},{"name":"安全性","slug":"安全性","count":2,"path":"api/tags/安全性.json"},{"name":"JWT","slug":"JWT","count":2,"path":"api/tags/JWT.json"},{"name":"Vue.js","slug":"Vue-js","count":2,"path":"api/tags/Vue-js.json"},{"name":"用户认证","slug":"用户认证","count":1,"path":"api/tags/用户认证.json"},{"name":"角色权限管理","slug":"角色权限管理","count":1,"path":"api/tags/角色权限管理.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true}}