{"title":"提升性能的秘密武器：Spring Boot 缓存策略详解","uid":"a9e4ea48549354f20459e1e2acd73599","slug":"spring-boot-caching-strategies","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/spring-boot-caching-strategies.json","keywords":null,"cover":"https://example.com/cover-images/spring-boot-caching.png","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在现代高并发的 Web 应用中，缓存是一种必不可少的性能优化手段。合理的缓存策略可以显著减少数据库压力、提升响应速度，但不当的缓存使用也可能导致数据不一致和缓存雪崩等问题。本文将带你深入了解<br>Spring Boot 中的缓存机制，并探讨如何结合 Redis 和 Caffeine 实现高效的缓存管理。</p>\n<h1 id=\"1-缓存的基本原理\"><a href=\"#1-缓存的基本原理\" class=\"headerlink\" title=\"1. 缓存的基本原理\"></a>1. 缓存的基本原理</h1><h2 id=\"1-1-什么是缓存？\"><a href=\"#1-1-什么是缓存？\" class=\"headerlink\" title=\"1.1 什么是缓存？\"></a>1.1 什么是缓存？</h2><p>缓存是一种存储临时数据的机制，通常用于加速数据访问，减少对后端系统（如数据库）的频繁请求。常见的缓存层次包括：</p>\n<ul>\n<li><strong>本地缓存</strong>：存储在应用服务器内存中，访问速度快，适用于少量、高频访问的数据。</li>\n<li><strong>分布式缓存</strong>：如 Redis，适用于跨服务共享缓存，具有持久化和高可用特性。</li>\n</ul>\n<h2 id=\"1-2-缓存的常见问题\"><a href=\"#1-2-缓存的常见问题\" class=\"headerlink\" title=\"1.2 缓存的常见问题\"></a>1.2 缓存的常见问题</h2><ul>\n<li><strong>缓存穿透</strong>：查询的数据不存在，导致每次请求都打到数据库。</li>\n<li><strong>缓存雪崩</strong>：大量缓存同时失效，导致系统瞬时负载过高。</li>\n<li><strong>缓存击穿</strong>：热点数据在失效瞬间被大量请求，瞬间击穿缓存层。</li>\n</ul>\n<h1 id=\"2-Spring-Boot-缓存框架概览\"><a href=\"#2-Spring-Boot-缓存框架概览\" class=\"headerlink\" title=\"2. Spring Boot 缓存框架概览\"></a>2. Spring Boot 缓存框架概览</h1><p>Spring Boot 提供了强大的缓存抽象，支持多种缓存实现，包括 <strong>ConcurrentMap</strong>、<strong>EhCache</strong>、<strong>Redis</strong> 和 <strong>Caffeine</strong> 等。</p>\n<h2 id=\"2-1-启用缓存支持\"><a href=\"#2-1-启用缓存支持\" class=\"headerlink\" title=\"2.1 启用缓存支持\"></a>2.1 启用缓存支持</h2><p>在 Spring Boot 项目中启用缓存非常简单，只需添加 <code>@EnableCaching</code> 注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CachingApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(CachingApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-常用缓存注解\"><a href=\"#2-2-常用缓存注解\" class=\"headerlink\" title=\"2.2 常用缓存注解\"></a>2.2 常用缓存注解</h2><ul>\n<li><code>@Cacheable</code>：方法调用前先检查缓存，存在则返回缓存结果，否则执行方法并缓存结果。</li>\n<li><code>@CachePut</code>：每次调用方法都会更新缓存，确保缓存中的数据最新。</li>\n<li><code>@CacheEvict</code>：清除缓存中的数据，常用于数据更新或删除操作。</li>\n</ul>\n<h1 id=\"3-使用-Redis-作为分布式缓存\"><a href=\"#3-使用-Redis-作为分布式缓存\" class=\"headerlink\" title=\"3. 使用 Redis 作为分布式缓存\"></a>3. 使用 Redis 作为分布式缓存</h1><p>Redis 是最常用的分布式缓存解决方案，具有高性能和丰富的数据结构支持。</p>\n<h2 id=\"3-1-引入依赖\"><a href=\"#3-1-引入依赖\" class=\"headerlink\" title=\"3.1 引入依赖\"></a>3.1 引入依赖</h2><p>在 <code>pom.xml</code> 中添加 Redis 依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-配置-Redis-连接\"><a href=\"#3-2-配置-Redis-连接\" class=\"headerlink\" title=\"3.2 配置 Redis 连接\"></a>3.2 配置 Redis 连接</h2><p>在 <code>application.yml</code> 中配置 Redis 连接信息：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">yourpassword</span></span><br><span class=\"line\">    <span class=\"attr\">lettuce:</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"string\">-1ms</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-实现-Redis-缓存\"><a href=\"#3-3-实现-Redis-缓存\" class=\"headerlink\" title=\"3.3 实现 Redis 缓存\"></a>3.3 实现 Redis 缓存</h2><p>使用 <code>@Cacheable</code> 注解将查询结果缓存到 Redis：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Cacheable(value = &quot;users&quot;, key = &quot;#id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUserById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟数据库查询</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> database.findById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>说明</strong>：</p>\n<ul>\n<li><code>value</code> 指定缓存名称（即 Redis 的 key 前缀）。</li>\n<li><code>key</code> 指定缓存键，支持 SpEL 表达式。</li>\n</ul>\n<h1 id=\"4-使用-Caffeine-实现本地缓存\"><a href=\"#4-使用-Caffeine-实现本地缓存\" class=\"headerlink\" title=\"4. 使用 Caffeine 实现本地缓存\"></a>4. 使用 Caffeine 实现本地缓存</h1><p>Caffeine 是一个高性能的本地缓存库，性能比 Guava Cache 更优。</p>\n<h2 id=\"4-1-引入依赖\"><a href=\"#4-1-引入依赖\" class=\"headerlink\" title=\"4.1 引入依赖\"></a>4.1 引入依赖</h2><p>在 <code>pom.xml</code> 中添加 Caffeine 依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>caffeine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-配置-Caffeine-缓存\"><a href=\"#4-2-配置-Caffeine-缓存\" class=\"headerlink\" title=\"4.2 配置 Caffeine 缓存\"></a>4.2 配置 Caffeine 缓存</h2><p>在 <code>application.yml</code> 中配置缓存参数：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">caffeine</span></span><br><span class=\"line\">    <span class=\"attr\">caffeine:</span></span><br><span class=\"line\">      <span class=\"attr\">spec:</span> <span class=\"string\">maximumSize=500,expireAfterWrite=10m</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-使用-Caffeine-缓存\"><a href=\"#4-3-使用-Caffeine-缓存\" class=\"headerlink\" title=\"4.3 使用 Caffeine 缓存\"></a>4.3 使用 Caffeine 缓存</h2><p>Caffeine 缓存的使用方式与 Redis 类似：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProductService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Cacheable(value = &quot;products&quot;, key = &quot;#productId&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Product <span class=\"title function_\">getProductById</span><span class=\"params\">(Long productId)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 模拟数据库查询</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> database.findById(productId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-缓存策略优化\"><a href=\"#5-缓存策略优化\" class=\"headerlink\" title=\"5. 缓存策略优化\"></a>5. 缓存策略优化</h1><h2 id=\"5-1-缓存预热\"><a href=\"#5-1-缓存预热\" class=\"headerlink\" title=\"5.1 缓存预热\"></a>5.1 缓存预热</h2><p>在系统启动时预先加载热点数据到缓存，避免冷启动时的缓存穿透问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EventListener(ApplicationReadyEvent.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preloadCache</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    List&lt;User&gt; users = userRepository.findAll();</span><br><span class=\"line\">    users.forEach(user -&gt; cacheManager.getCache(<span class=\"string\">&quot;users&quot;</span>).put(user.getId(), user));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-2-缓存失效策略\"><a href=\"#5-2-缓存失效策略\" class=\"headerlink\" title=\"5.2 缓存失效策略\"></a>5.2 缓存失效策略</h2><ul>\n<li><strong>定时刷新</strong>：使用 <code>@Scheduled</code> 定时刷新缓存，确保数据的新鲜度。</li>\n<li><strong>双写一致性</strong>：数据更新时同步更新缓存，防止缓存与数据库数据不一致。</li>\n</ul>\n<h2 id=\"5-3-防止缓存击穿\"><a href=\"#5-3-防止缓存击穿\" class=\"headerlink\" title=\"5.3 防止缓存击穿\"></a>5.3 防止缓存击穿</h2><p>使用 <strong>互斥锁</strong> 或 <strong>布隆过滤器</strong> 防止热点数据在失效瞬间被大量请求击穿缓存。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Cacheable(value = &quot;products&quot;, key = &quot;#productId&quot;, sync = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Product <span class=\"title function_\">getProductById</span><span class=\"params\">(Long productId)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询数据库</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> database.findById(productId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-缓存监控与调优\"><a href=\"#6-缓存监控与调优\" class=\"headerlink\" title=\"6. 缓存监控与调优\"></a>6. 缓存监控与调优</h1><p>定期监控缓存命中率和性能指标，及时调整缓存策略。</p>\n<h2 id=\"6-1-Redis-监控\"><a href=\"#6-1-Redis-监控\" class=\"headerlink\" title=\"6.1 Redis 监控\"></a>6.1 Redis 监控</h2><p>使用 <code>INFO</code> 命令查看 Redis 缓存统计信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli INFO stats</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>keyspace_hits</code>：缓存命中次数。</li>\n<li><code>keyspace_misses</code>：缓存未命中次数。</li>\n</ul>\n<h2 id=\"6-2-Caffeine-统计\"><a href=\"#6-2-Caffeine-统计\" class=\"headerlink\" title=\"6.2 Caffeine 统计\"></a>6.2 Caffeine 统计</h2><p>启用 Caffeine 的统计功能，分析缓存的使用情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache&lt;Object, Object&gt; cache = Caffeine.newBuilder()</span><br><span class=\"line\">        .maximumSize(<span class=\"number\">500</span>)</span><br><span class=\"line\">        .recordStats()</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"><span class=\"type\">CacheStats</span> <span class=\"variable\">stats</span> <span class=\"operator\">=</span> cache.stats();</span><br><span class=\"line\">System.out.</span><br><span class=\"line\"></span><br><span class=\"line\">println(<span class=\"string\">&quot;命中率: &quot;</span>+stats.hitRate());</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>缓存是提升 Spring Boot 应用性能的核心手段之一。通过合理的缓存策略、结合 Redis 和 Caffeine<br>的使用，可以有效降低系统负载，提高响应速度。同时，持续监控和调优缓存，确保系统在高并发场景下依然稳定高效运行。</p>\n","feature":true,"text":"本文深入探讨了 Spring Boot 中的缓存机制，详细讲解了缓存的基本原理、常用缓存工具（如 Redis 和 Caffeine）的集成与配置，以及不同业务场景下的缓存策略优化方法。...","permalink":"/post/spring-boot-caching-strategies","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"性能优化","slug":"后端开发/性能优化","count":6,"path":"api/categories/后端开发/性能优化.json"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","count":11,"path":"api/tags/Spring-Boot.json"},{"name":"性能优化","slug":"性能优化","count":7,"path":"api/tags/性能优化.json"},{"name":"缓存策略","slug":"缓存策略","count":5,"path":"api/tags/缓存策略.json"},{"name":"Redis","slug":"Redis","count":2,"path":"api/tags/Redis.json"},{"name":"Caffeine","slug":"Caffeine","count":1,"path":"api/tags/Caffeine.json"},{"name":"数据一致性","slug":"数据一致性","count":1,"path":"api/tags/数据一致性.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%BC%93%E5%AD%98%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1. 缓存的基本原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E4%BB%80%E4%B9%88%E6%98%AF%E7%BC%93%E5%AD%98%EF%BC%9F\"><span class=\"toc-text\">1.1 什么是缓存？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E7%BC%93%E5%AD%98%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">1.2 缓存的常见问题</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-Spring-Boot-%E7%BC%93%E5%AD%98%E6%A1%86%E6%9E%B6%E6%A6%82%E8%A7%88\"><span class=\"toc-text\">2. Spring Boot 缓存框架概览</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E5%90%AF%E7%94%A8%E7%BC%93%E5%AD%98%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">2.1 启用缓存支持</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%B8%B8%E7%94%A8%E7%BC%93%E5%AD%98%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">2.2 常用缓存注解</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E4%BD%BF%E7%94%A8-Redis-%E4%BD%9C%E4%B8%BA%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">3. 使用 Redis 作为分布式缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">3.1 引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E9%85%8D%E7%BD%AE-Redis-%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">3.2 配置 Redis 连接</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E5%AE%9E%E7%8E%B0-Redis-%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">3.3 实现 Redis 缓存</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8-Caffeine-%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">4. 使用 Caffeine 实现本地缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">4.1 引入依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E9%85%8D%E7%BD%AE-Caffeine-%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">4.2 配置 Caffeine 缓存</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E4%BD%BF%E7%94%A8-Caffeine-%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">4.3 使用 Caffeine 缓存</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">5. 缓存策略优化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD\"><span class=\"toc-text\">5.1 缓存预热</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">5.2 缓存失效策略</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-3-%E9%98%B2%E6%AD%A2%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF\"><span class=\"toc-text\">5.3 防止缓存击穿</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E7%BC%93%E5%AD%98%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">6. 缓存监控与调优</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-Redis-%E7%9B%91%E6%8E%A7\"><span class=\"toc-text\">6.1 Redis 监控</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-2-Caffeine-%E7%BB%9F%E8%AE%A1\"><span class=\"toc-text\">6.2 Caffeine 统计</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a></li></ol>","author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring Boot 数据库优化实战","uid":"da282162e3762aeb9ca6ed290877c2e2","slug":"spring-boot-database-optimization","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/spring-boot-database-optimization.json","keywords":null,"cover":"https://example.com/cover-images/spring-boot-database-optimization.png","text":"本文系统讲解了如何在Spring Boot应用中优化数据库性能，包括连接池配置、SQL调优、索引使用和缓存策略等，助力开发者提升系统响应速度与稳定性。...","permalink":"/post/spring-boot-database-optimization","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"数据库优化","slug":"后端开发/数据库优化","count":1,"path":"api/categories/后端开发/数据库优化.json"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","count":11,"path":"api/tags/Spring-Boot.json"},{"name":"数据库优化","slug":"数据库优化","count":3,"path":"api/tags/数据库优化.json"},{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"},{"name":"HikariCP","slug":"HikariCP","count":1,"path":"api/tags/HikariCP.json"},{"name":"SQL调优","slug":"SQL调优","count":1,"path":"api/tags/SQL调优.json"},{"name":"缓存策略","slug":"缓存策略","count":5,"path":"api/tags/缓存策略.json"},{"name":"性能调优","slug":"性能调优","count":2,"path":"api/tags/性能调优.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"软件设计教程：从需求到架构","uid":"f9dcc5cb0e2169488ba353001fae5396","slug":"software-design-tutorial","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/software-design-tutorial.json","keywords":null,"cover":"https://example.com/cover-images/software-design.png","text":"本文将为你提供从需求分析到系统架构设计的全面软件设计教程，介绍常见的设计原则、设计模式、UML建模方法等内容，帮助你构建高质量的软件系统。...","permalink":"/post/software-design-tutorial","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"软件工程","slug":"软件工程","count":2,"path":"api/categories/软件工程.json"},{"name":"软件设计","slug":"软件工程/软件设计","count":2,"path":"api/categories/软件工程/软件设计.json"},{"name":"系统架构","slug":"软件工程/软件设计/系统架构","count":1,"path":"api/categories/软件工程/软件设计/系统架构.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":2,"path":"api/tags/设计模式.json"},{"name":"软件设计","slug":"软件设计","count":2,"path":"api/tags/软件设计.json"},{"name":"系统架构","slug":"系统架构","count":2,"path":"api/tags/系统架构.json"},{"name":"需求分析","slug":"需求分析","count":1,"path":"api/tags/需求分析.json"},{"name":"UML建模","slug":"UML建模","count":1,"path":"api/tags/UML建模.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true}}