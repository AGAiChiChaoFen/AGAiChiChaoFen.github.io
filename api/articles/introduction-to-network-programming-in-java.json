{"title":"Java 网络编程入门指南","uid":"160bd7168fb982c41a27f025fa85802f","slug":"introduction-to-network-programming-in-java","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/introduction-to-network-programming-in-java.json","keywords":null,"cover":"https://example.com/cover-images/network-programming-java.png","content":"<h3 id=\"Java-网络编程入门指南\"><a href=\"#Java-网络编程入门指南\" class=\"headerlink\" title=\"Java 网络编程入门指南\"></a>Java 网络编程入门指南</h3><p>网络编程是指在计算机网络环境下开发应用程序，用于实现网络中的不同设备间的通信。Java 提供了强大的网络编程支持，使得开发者可以方便地构建分布式系统、客户端和服务器应用程序。</p>\n<p>本文将深入探讨 Java 网络编程的基础知识，包括常用的网络通信协议、如何使用 Java 构建网络应用，以及如何利用 Java Socket 编程实现客户端和服务器的通信。</p>\n<h3 id=\"1-网络编程的基本概念\"><a href=\"#1-网络编程的基本概念\" class=\"headerlink\" title=\"1. 网络编程的基本概念\"></a>1. 网络编程的基本概念</h3><p>网络编程涉及计算机通过网络进行数据交换和通信的技术。通常，网络编程包含以下两个核心概念：</p>\n<ul>\n<li><strong>客户端（Client）</strong>：请求并接收服务的一方。例如，浏览器向 Web 服务器发送请求。</li>\n<li><strong>服务器（Server）</strong>：提供服务的一方。例如，Web 服务器接收并响应来自浏览器的请求。</li>\n</ul>\n<p>这两者之间的通信通常基于客户端-服务器模型。客户端和服务器通过协议进行通信，常见的协议有 TCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）。</p>\n<h3 id=\"2-Java-网络编程基础\"><a href=\"#2-Java-网络编程基础\" class=\"headerlink\" title=\"2. Java 网络编程基础\"></a>2. Java 网络编程基础</h3><p>Java 网络编程主要依赖于 <code>java.net</code> 包中的类。以下是一些常用的类：</p>\n<ul>\n<li><code>Socket</code>：用于客户端与服务器的连接。</li>\n<li><code>ServerSocket</code>：用于服务器端监听客户端的连接。</li>\n<li><code>InetAddress</code>：表示一个 IP 地址。</li>\n<li><code>URL</code>：用于表示网络资源的 URL 地址。</li>\n</ul>\n<p>Java 网络编程可以通过基于 TCP 或 UDP 的协议来实现通信。TCP 是一种面向连接的协议，提供可靠的通信；而 UDP 是一种无连接的协议，传输速度较快，但不保证数据的可靠性。</p>\n<h3 id=\"3-Java-中的-Socket-编程\"><a href=\"#3-Java-中的-Socket-编程\" class=\"headerlink\" title=\"3. Java 中的 Socket 编程\"></a>3. Java 中的 Socket 编程</h3><p>Socket 编程是 Java 网络编程的核心，Java 提供了 <code>Socket</code> 类用于客户端与服务器的通信。以下是如何使用 Java 实现基于 TCP 协议的 Socket 编程的基本步骤。</p>\n<h4 id=\"3-1-客户端编程\"><a href=\"#3-1-客户端编程\" class=\"headerlink\" title=\"3.1 客户端编程\"></a>3.1 客户端编程</h4><p>客户端通过 <code>Socket</code> 类与服务器建立连接，并向服务器发送数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建与服务器的连接，指定服务器地址和端口</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">8080</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 获取输出流，向服务器发送数据</span></span><br><span class=\"line\">            <span class=\"type\">OutputStream</span> <span class=\"variable\">output</span> <span class=\"operator\">=</span> socket.getOutputStream();</span><br><span class=\"line\">            <span class=\"type\">PrintWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span>(output, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            writer.println(<span class=\"string\">&quot;Hello, Server!&quot;</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 获取输入流，接收服务器的响应</span></span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">            <span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(input));</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> reader.readLine();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Server Response: &quot;</span> + response);</span><br><span class=\"line\">            </span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，客户端连接到本地的 8080 端口，发送一条消息 “Hello, Server!” 并接收服务器的响应。</p>\n<h4 id=\"3-2-服务器端编程\"><a href=\"#3-2-服务器端编程\" class=\"headerlink\" title=\"3.2 服务器端编程\"></a>3.2 服务器端编程</h4><p>服务器端使用 <code>ServerSocket</code> 类来监听客户端的连接请求，并与客户端建立通信。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 创建 ServerSocket，监听指定端口</span></span><br><span class=\"line\">            <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">8080</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Server is waiting for client connection...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 接受客户端的连接请求</span></span><br><span class=\"line\">            <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> serverSocket.accept();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Client connected!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取输入流，接收客户端消息</span></span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">            <span class=\"type\">BufferedReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(input));</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> reader.readLine();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Client Message: &quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取输出流，向客户端发送响应</span></span><br><span class=\"line\">            <span class=\"type\">OutputStream</span> <span class=\"variable\">output</span> <span class=\"operator\">=</span> socket.getOutputStream();</span><br><span class=\"line\">            <span class=\"type\">PrintWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span>(output, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            writer.println(<span class=\"string\">&quot;Hello, Client! Message received.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>服务器端会监听端口 8080，等待客户端的连接请求。连接成功后，服务器会接收客户端的消息，并发送一条响应消息。</p>\n<h4 id=\"3-3-运行示例\"><a href=\"#3-3-运行示例\" class=\"headerlink\" title=\"3.3 运行示例\"></a>3.3 运行示例</h4><ol>\n<li>先启动服务器程序 <code>Server</code>，它会在 8080 端口等待客户端连接。</li>\n<li>然后启动客户端程序 <code>Client</code>，它会连接到服务器，发送数据并接收响应。</li>\n</ol>\n<p>如果一切正常，客户端将会输出服务器的响应消息：”Server Response: Hello, Client! Message received.”。</p>\n<hr>\n<h3 id=\"4-Java-中的-UDP-编程\"><a href=\"#4-Java-中的-UDP-编程\" class=\"headerlink\" title=\"4. Java 中的 UDP 编程\"></a>4. Java 中的 UDP 编程</h3><p>除了 TCP，Java 还支持基于 UDP 协议的网络编程。与 TCP 不同，UDP 是无连接的，适用于对实时性要求高、但对数据丢失容忍度高的应用场景，如视频流、在线游戏等。</p>\n<p>以下是一个简单的 UDP 客户端和服务器示例：</p>\n<h4 id=\"4-1-UDP-客户端\"><a href=\"#4-1-UDP-客户端\" class=\"headerlink\" title=\"4.1 UDP 客户端\"></a>4.1 UDP 客户端</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.net.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UDPClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">DatagramSocket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramSocket</span>();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello, UDP Server!&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buffer = message.getBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">InetAddress</span> <span class=\"variable\">serverAddress</span> <span class=\"operator\">=</span> InetAddress.getByName(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">DatagramPacket</span> <span class=\"variable\">packet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramPacket</span>(buffer, buffer.length, serverAddress, <span class=\"number\">9876</span>);</span><br><span class=\"line\">            socket.send(packet);</span><br><span class=\"line\"></span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-UDP-服务器\"><a href=\"#4-2-UDP-服务器\" class=\"headerlink\" title=\"4.2 UDP 服务器\"></a>4.2 UDP 服务器</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.net.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UDPServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">DatagramSocket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramSocket</span>(<span class=\"number\">9876</span>);</span><br><span class=\"line\">            <span class=\"type\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"type\">DatagramPacket</span> <span class=\"variable\">packet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DatagramPacket</span>(buffer, buffer.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            socket.receive(packet);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(packet.getData(), <span class=\"number\">0</span>, packet.getLength());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Received message: &quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，UDP 客户端发送一个消息到 9876 端口，UDP 服务器接收并输出消息。</p>\n<hr>\n<h3 id=\"5-小结\"><a href=\"#5-小结\" class=\"headerlink\" title=\"5. 小结\"></a>5. 小结</h3><p>Java 网络编程为我们提供了强大的工具，使得开发分布式系统和网络应用变得更加容易。通过使用 <code>Socket</code> 和 <code>ServerSocket</code><br>类，开发者可以轻松实现基于 TCP 或 UDP 协议的客户端和服务器通信。</p>\n<ul>\n<li><strong>TCP</strong> 适用于需要可靠数据传输的场景，如网页浏览、文件传输等。</li>\n<li><strong>UDP</strong> 则适用于对速度要求高但对数据丢失有一定容忍度的应用场景，如视频会议、在线游戏等。</li>\n</ul>\n<p>掌握网络编程技能，能够帮助你开发更加高效、灵活的网络应用，为后续的分布式系统架构打下坚实的基础。</p>\n","feature":true,"text":"本文介绍了 Java 网络编程的基本概念、常用的网络通信协议以及如何使用 Java 构建客户端和服务器应用程序，并通过实例展示如何进行基本的 Socket 编程。...","permalink":"/post/introduction-to-network-programming-in-java","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"},{"name":"网络编程","slug":"Java/网络编程","count":1,"path":"api/categories/Java/网络编程.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"网络编程","slug":"网络编程","count":1,"path":"api/tags/网络编程.json"},{"name":"Socket编程","slug":"Socket编程","count":1,"path":"api/tags/Socket编程.json"},{"name":"客户端-服务器模型","slug":"客户端-服务器模型","count":1,"path":"api/tags/客户端-服务器模型.json"},{"name":"网络通信","slug":"网络通信","count":1,"path":"api/tags/网络通信.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97\"><span class=\"toc-text\">Java 网络编程入门指南</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. 网络编程的基本概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">2. Java 网络编程基础</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Java-%E4%B8%AD%E7%9A%84-Socket-%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">3. Java 中的 Socket 编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">3.1 客户端编程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">3.2 服务器端编程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E8%BF%90%E8%A1%8C%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">3.3 运行示例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Java-%E4%B8%AD%E7%9A%84-UDP-%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">4. Java 中的 UDP 编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-UDP-%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">4.1 UDP 客户端</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-UDP-%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">4.2 UDP 服务器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">5. 小结</span></a></li></ol>","author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"深入介绍 Hutool 工具包","uid":"d1931fd71e34753c42f4f6aa2e79ea54","slug":"introduction-to-hutool-java-library","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/introduction-to-hutool-java-library.json","keywords":null,"cover":"https://example.com/cover-images/hutool-library.png","text":"本文详细介绍了 Hutool 工具包，探讨其常用功能及优势，包括其在项目中的实际应用，帮助开发者提高工作效率。...","permalink":"/post/introduction-to-hutool-java-library","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"},{"name":"工具包","slug":"Java/工具包","count":1,"path":"api/categories/Java/工具包.json"}],"tags":[{"name":"Hutool","slug":"Hutool","count":1,"path":"api/tags/Hutool.json"},{"name":"Java工具包","slug":"Java工具包","count":1,"path":"api/tags/Java工具包.json"},{"name":"开发效率","slug":"开发效率","count":2,"path":"api/tags/开发效率.json"},{"name":"常用工具","slug":"常用工具","count":1,"path":"api/tags/常用工具.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"Java Stream API 深入讲解","uid":"f304010a5f80df00d45a8b651ef611b2","slug":"introduction-to-stream-api-in-java","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/introduction-to-stream-api-in-java.json","keywords":null,"cover":"https://example.com/cover-images/java-stream-api.png","text":"本文详细介绍了 Java 8 引入的 Stream API，通过简明的示例讲解了如何使用 Stream 进行集合数据的处理、转换和操作，探讨了常见的操作方法以及性能优化技巧。...","permalink":"/post/introduction-to-stream-api-in-java","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"},{"name":"Stream API","slug":"Java/Stream-API","count":1,"path":"api/categories/Java/Stream-API.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"Stream API","slug":"Stream-API","count":1,"path":"api/tags/Stream-API.json"},{"name":"函数式编程","slug":"函数式编程","count":2,"path":"api/tags/函数式编程.json"},{"name":"数据流处理","slug":"数据流处理","count":1,"path":"api/tags/数据流处理.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true}}