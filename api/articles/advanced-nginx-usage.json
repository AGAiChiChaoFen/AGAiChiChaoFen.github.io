{"title":"NGINX 高级用法详解","uid":"b8f8ebddcfc92f03242b80fd2c3edf09","slug":"advanced-nginx-usage","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/advanced-nginx-usage.json","keywords":null,"cover":"https://example.com/cover-images/nginx-advanced-usage.png","content":"<h3 id=\"NGINX-高级用法详解\"><a href=\"#NGINX-高级用法详解\" class=\"headerlink\" title=\"NGINX 高级用法详解\"></a>NGINX 高级用法详解</h3><p>NGINX 是一个非常强大的 Web 服务器，它不仅能够处理静态文件，还可以作为反向代理、负载均衡器、API 网关等。在日常使用中，我们常见的 NGINX 配置可能只是一些基础设置，但 NGINX 提供了大量的高级功能，能够显著提升系统的性能和稳定性。本文将深入探讨一些 NGINX 的高级用法，包括负载均衡、反向代理、缓存策略、SSL 配置和高可用性等。</p>\n<h3 id=\"1-反向代理与负载均衡\"><a href=\"#1-反向代理与负载均衡\" class=\"headerlink\" title=\"1. 反向代理与负载均衡\"></a>1. 反向代理与负载均衡</h3><p>NGINX 最常见的应用之一是作为反向代理服务器，它可以将客户端请求转发到后端的应用服务器。通过配置负载均衡策略，NGINX 可以将请求均匀地分发到多个应用服务器上，确保系统的高可用性和高并发性能。</p>\n<h4 id=\"1-1-反向代理配置\"><a href=\"#1-1-反向代理配置\" class=\"headerlink\" title=\"1.1 反向代理配置\"></a>1.1 反向代理配置</h4><p>反向代理是指将客户端请求转发到后端服务器并将响应返回给客户端。基本的反向代理配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://backend_server;   <span class=\"comment\"># 转发请求到后端服务器</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host <span class=\"variable\">$host</span>;         <span class=\"comment\"># 保持原始请求头</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP <span class=\"variable\">$remote_addr</span>;  <span class=\"comment\"># 转发客户端 IP</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;  <span class=\"comment\"># 转发客户端真实 IP</span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-Proto <span class=\"variable\">$scheme</span>;  <span class=\"comment\"># 保持原始协议</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个配置中，NGINX 会将所有请求转发到 <code>backend_server</code> 上。</p>\n<h4 id=\"1-2-负载均衡配置\"><a href=\"#1-2-负载均衡配置\" class=\"headerlink\" title=\"1.2 负载均衡配置\"></a>1.2 负载均衡配置</h4><p>负载均衡的目的是将请求平均分配给多个后端服务器，从而提高系统的吞吐量和可用性。NGINX 支持多种负载均衡策略，如轮询、IP 哈希等。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">upstream</span> backend_servers &#123;</span><br><span class=\"line\">        <span class=\"attribute\">server</span> backend1.example.com weight=<span class=\"number\">3</span>;   <span class=\"comment\"># 后端服务器 1，权重为 3</span></span><br><span class=\"line\">        <span class=\"attribute\">server</span> backend2.example.com;            <span class=\"comment\"># 后端服务器 2，权重默认为 1</span></span><br><span class=\"line\">        <span class=\"attribute\">server</span> backend3.example.com;            <span class=\"comment\"># 后端服务器 3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://backend_servers;   <span class=\"comment\"># 使用 upstream 指定的后端服务器池</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，NGINX 使用 <code>upstream</code> 配置来定义一组后端服务器，并使用轮询算法（默认）将请求分发到不同的服务器上。权重可以帮助你控制请求分配的比例，权重越大，分配的请求越多。</p>\n<hr>\n<h3 id=\"2-Caching（缓存）策略\"><a href=\"#2-Caching（缓存）策略\" class=\"headerlink\" title=\"2. Caching（缓存）策略\"></a>2. Caching（缓存）策略</h3><p>缓存是提升 Web 应用性能的重要手段，NGINX 作为反向代理服务器时，提供了强大的缓存功能。它能够缓存后端应用的响应，减少后端服务器的负载，提升响应速度。</p>\n<h4 id=\"2-1-静态文件缓存\"><a href=\"#2-1-静态文件缓存\" class=\"headerlink\" title=\"2.1 静态文件缓存\"></a>2.1 静态文件缓存</h4><p>对于静态资源（如图片、CSS、JavaScript 文件），NGINX 可以配置缓存策略，使得这些文件只需从源服务器加载一次，后续请求直接从缓存中获取。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> /static/ &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /var/www/html;</span><br><span class=\"line\">        <span class=\"attribute\">expires</span> <span class=\"number\">30d</span>;  <span class=\"comment\"># 设置缓存过期时间为 30 天</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，所有访问 <code>/static/</code> 路径的请求都会被缓存 30 天。</p>\n<h4 id=\"2-2-动态内容缓存\"><a href=\"#2-2-动态内容缓存\" class=\"headerlink\" title=\"2.2 动态内容缓存\"></a>2.2 动态内容缓存</h4><p>对于动态生成的内容，NGINX 也可以进行缓存。通过 <code>proxy_cache</code> 配置，NGINX 可以缓存来自后端服务器的响应，从而加速用户访问。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">proxy_cache_path</span> /tmp/cache levels=<span class=\"number\">1</span>:<span class=\"number\">2</span> keys_zone=backend_cache:<span class=\"number\">10m</span> max_size=<span class=\"number\">1g</span> inactive=<span class=\"number\">60m</span>;</span><br><span class=\"line\">    <span class=\"section\">upstream</span> backend_servers &#123;</span><br><span class=\"line\">        <span class=\"attribute\">server</span> backend1.example.com;</span><br><span class=\"line\">        <span class=\"attribute\">server</span> backend2.example.com;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache</span> backend_cache;  <span class=\"comment\"># 启用缓存</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">200</span> <span class=\"number\">302</span> <span class=\"number\">1h</span>;  <span class=\"comment\"># 200 和 302 响应缓存 1 小时</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">404</span> <span class=\"number\">1m</span>;     <span class=\"comment\"># 404 响应缓存 1 分钟</span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_pass</span> http://backend_servers;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，NGINX 使用 <code>proxy_cache</code> 指令来缓存来自 <code>backend_servers</code> 的响应，并设置不同的缓存有效期。</p>\n<hr>\n<h3 id=\"3-SSL-TLS-配置\"><a href=\"#3-SSL-TLS-配置\" class=\"headerlink\" title=\"3. SSL&#x2F;TLS 配置\"></a>3. SSL&#x2F;TLS 配置</h3><p>在现代 Web 应用中，SSL&#x2F;TLS 加密已经成为标准，NGINX 作为反向代理也需要处理 SSL&#x2F;TLS 协议。通过 NGINX 的 <code>ssl</code> 模块，开发者可以轻松地启用<br>HTTPS，确保数据传输的安全性。</p>\n<h4 id=\"3-1-配置-SSL\"><a href=\"#3-1-配置-SSL\" class=\"headerlink\" title=\"3.1 配置 SSL\"></a>3.1 配置 SSL</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /etc/nginx/ssl/example.com.crt;   <span class=\"comment\"># SSL 证书</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /etc/nginx/ssl/example.com.key;  <span class=\"comment\"># SSL 私钥</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1.<span class=\"number\">2</span> TLSv1.<span class=\"number\">3</span>;  <span class=\"comment\"># 支持的 SSL/TLS 协议</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> <span class=\"string\">&#x27;ECDHE-ECDSA-AES128-GCM-SHA256:...&#x27;</span>;  <span class=\"comment\"># 加密套件</span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://backend_servers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个配置中，NGINX 启用了 HTTPS，使用 <code>ssl_certificate</code> 和 <code>ssl_certificate_key</code> 指定了 SSL 证书和私钥。</p>\n<h4 id=\"3-2-强制-HTTPS\"><a href=\"#3-2-强制-HTTPS\" class=\"headerlink\" title=\"3.2 强制 HTTPS\"></a>3.2 强制 HTTPS</h4><p>为了确保所有流量都通过 HTTPS 传输，可以使用 <code>301</code> 重定向将 HTTP 流量重定向到 HTTPS。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;  <span class=\"comment\"># 强制将 HTTP 请求重定向到 HTTPS</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-高可用性与容错\"><a href=\"#4-高可用性与容错\" class=\"headerlink\" title=\"4. 高可用性与容错\"></a>4. 高可用性与容错</h3><p>为了提高服务的可用性，NGINX 支持多种高可用性配置，例如故障转移、健康检查等。当某个后端服务器不可用时，NGINX<br>可以自动将流量转发到其他健康的服务器。</p>\n<h4 id=\"4-1-健康检查配置\"><a href=\"#4-1-健康检查配置\" class=\"headerlink\" title=\"4.1 健康检查配置\"></a>4.1 健康检查配置</h4><p>NGINX 可以定期检查后端服务器的健康状况，并根据健康状况决定是否将流量转发给该服务器。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">upstream</span> backend_servers &#123;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> backend1.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> backend2.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">server</span> backend3.example.com;</span><br><span class=\"line\"></span><br><span class=\"line\">    health_check;  <span class=\"comment\"># 启用健康检查</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，NGINX 会定期检查后端服务器的健康状况，并且如果某台服务器不可用，流量将自动转发到其他健康的服务器。</p>\n<hr>\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><p>NGINX 是一个非常强大的工具，支持多种高级配置功能，如反向代理、负载均衡、缓存、SSL&#x2F;TLS 配置和高可用性等。通过合理配置<br>NGINX，我们可以显著提升 Web 应用的性能、可靠性和安全性。掌握 NGINX 的高级用法，对于开发者和运维人员来说，能够帮助更好地应对高并发、大流量的应用场景。</p>\n","feature":true,"text":"本文将深入探讨 NGINX 的高级用法，包括负载均衡、反向代理、缓存策略、SSL 配置和高可用性等，帮助开发者和运维人员更好地利用 NGINX 提升系统性能和稳定性。...","permalink":"/post/advanced-nginx-usage","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Web 开发","slug":"Web-开发","count":1,"path":"api/categories/Web-开发.json"},{"name":"NGINX","slug":"Web-开发/NGINX","count":1,"path":"api/categories/Web-开发/NGINX.json"},{"name":"性能优化","slug":"Web-开发/NGINX/性能优化","count":1,"path":"api/categories/Web-开发/NGINX/性能优化.json"}],"tags":[{"name":"NGINX","slug":"NGINX","count":1,"path":"api/tags/NGINX.json"},{"name":"反向代理","slug":"反向代理","count":1,"path":"api/tags/反向代理.json"},{"name":"负载均衡","slug":"负载均衡","count":2,"path":"api/tags/负载均衡.json"},{"name":"SSL 配置","slug":"SSL-配置","count":1,"path":"api/tags/SSL-配置.json"},{"name":"高可用性","slug":"高可用性","count":1,"path":"api/tags/高可用性.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#NGINX-%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">NGINX 高级用法详解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"><span class=\"toc-text\">1. 反向代理与负载均衡</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1.1 反向代理配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">1.2 负载均衡配置</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Caching%EF%BC%88%E7%BC%93%E5%AD%98%EF%BC%89%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">2. Caching（缓存）策略</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">2.1 静态文件缓存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">2.2 动态内容缓存</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-SSL-TLS-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3. SSL&#x2F;TLS 配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E9%85%8D%E7%BD%AE-SSL\"><span class=\"toc-text\">3.1 配置 SSL</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E5%BC%BA%E5%88%B6-HTTPS\"><span class=\"toc-text\">3.2 强制 HTTPS</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B8%8E%E5%AE%B9%E9%94%99\"><span class=\"toc-text\">4. 高可用性与容错</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4.1 健康检查配置</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5. 总结</span></a></li></ol>","author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"如何配置 JDK 环境","uid":"9875369d1ba09c05e3a2e83f271e2a9c","slug":"configure-jdk-environment","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/configure-jdk-environment.json","keywords":null,"cover":"https://example.com/cover-images/jdk-configuration.png","text":"本文介绍了如何在不同操作系统上配置 JDK 环境，包括安装、设置环境变量和验证配置。适合 Java 开发初学者。...","permalink":"/post/configure-jdk-environment","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"开发工具","slug":"开发工具","count":2,"path":"api/categories/开发工具.json"},{"name":"Java","slug":"开发工具/Java","count":2,"path":"api/categories/开发工具/Java.json"}],"tags":[{"name":"JDK","slug":"JDK","count":1,"path":"api/tags/JDK.json"},{"name":"环境配置","slug":"环境配置","count":2,"path":"api/tags/环境配置.json"},{"name":"Java 开发","slug":"Java-开发","count":3,"path":"api/tags/Java-开发.json"},{"name":"操作系统配置","slug":"操作系统配置","count":1,"path":"api/tags/操作系统配置.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"一些实用的 CSS 技巧提升现代网页设计","uid":"f7d96ebdf4d2c1acf5bfaff97afac0ef","slug":"css-tips-and-tricks-for-modern-web-design","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/css-tips-and-tricks-for-modern-web-design.json","keywords":null,"cover":"https://example.com/cover-images/css-tips.png","text":"本文将分享一些实用的 CSS 技巧，帮助开发者提升网页设计的效率和效果，涵盖了布局、响应式设计、动画等方面的技巧。...","permalink":"/post/css-tips-and-tricks-for-modern-web-design","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"前端开发","slug":"前端开发","count":4,"path":"api/categories/前端开发.json"},{"name":"CSS技巧","slug":"前端开发/CSS技巧","count":1,"path":"api/categories/前端开发/CSS技巧.json"}],"tags":[{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"},{"name":"网页设计","slug":"网页设计","count":2,"path":"api/tags/网页设计.json"},{"name":"响应式设计","slug":"响应式设计","count":2,"path":"api/tags/响应式设计.json"},{"name":"CSS动画","slug":"CSS动画","count":1,"path":"api/tags/CSS动画.json"},{"name":"布局技巧","slug":"布局技巧","count":1,"path":"api/tags/布局技巧.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true}}