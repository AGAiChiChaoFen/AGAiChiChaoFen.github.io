{"title":"如何使用 Spring Cloud Alibaba 搭建 Spring Cloud 项目","uid":"e80c035b430b9e13f522357568773bcc","slug":"how-to-setup-spring-cloud-using-spring-cloud-alibaba","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/how-to-setup-spring-cloud-using-spring-cloud-alibaba.json","keywords":null,"cover":"https://example.com/cover-images/spring-cloud-alibaba.png","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>Spring Cloud Alibaba 是一个基于 Spring Cloud 的微服务框架，提供了多种解决方案来实现微服务架构中的常见功能，如服务注册与发现、配置管理、负载均衡、熔断、限流等。它与<br>Spring Cloud 相兼容，具有高可用性和灵活性，广泛应用于分布式系统的构建。</p>\n<p>在本教程中，我们将展示如何使用 Spring Cloud Alibaba 搭建一个简单的 Spring Cloud 微服务架构。我们将涵盖以下几个重要功能：</p>\n<ul>\n<li>服务注册与发现（Nacos）</li>\n<li>负载均衡与服务调用（Dubbo）</li>\n<li>配置管理（Nacos）</li>\n<li>服务熔断与限流（Sentinel）</li>\n<li>API 网关（Spring Cloud Gateway）</li>\n</ul>\n<h1 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1. 环境准备\"></a>1. 环境准备</h1><p>在开始之前，我们需要准备以下环境：</p>\n<ul>\n<li>JDK 11 或更高版本</li>\n<li>Maven</li>\n<li>Spring Boot 2.x</li>\n<li>Spring Cloud Alibaba 相关依赖</li>\n<li>Nacos、Sentinel、Dubbo（可以选择 Docker 或单独启动这些服务）</li>\n</ul>\n<h2 id=\"1-1-安装-JDK-和-Maven\"><a href=\"#1-1-安装-JDK-和-Maven\" class=\"headerlink\" title=\"1.1 安装 JDK 和 Maven\"></a>1.1 安装 JDK 和 Maven</h2><p>确保你已经安装了 JDK 和 Maven，可以参考前面的博客来配置环境。验证 JDK 和 Maven 是否安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">mvn -version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-安装-Nacos\"><a href=\"#1-2-安装-Nacos\" class=\"headerlink\" title=\"1.2 安装 Nacos\"></a>1.2 安装 Nacos</h2><p>我们需要安装 Nacos 来作为服务注册与发现的中心。在 Nacos 的 GitHub 上下载并启动 Nacos，或者通过 Docker 启动：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8848:8848 --name nacos nacos/nacos-server</span><br></pre></td></tr></table></figure>\n\n<p>访问 Nacos 控制台：<a href=\"http://localhost:8848/nacos\">http://localhost:8848/nacos</a>，登录账号默认是 <code>nacos/nacos</code>。</p>\n<h1 id=\"2-创建-Spring-Cloud-项目\"><a href=\"#2-创建-Spring-Cloud-项目\" class=\"headerlink\" title=\"2. 创建 Spring Cloud 项目\"></a>2. 创建 Spring Cloud 项目</h1><h2 id=\"2-1-使用-Spring-Initializr-创建项目\"><a href=\"#2-1-使用-Spring-Initializr-创建项目\" class=\"headerlink\" title=\"2.1 使用 Spring Initializr 创建项目\"></a>2.1 使用 Spring Initializr 创建项目</h2><p>我们使用 Spring Initializr 创建一个简单的 Spring Boot 项目，并引入必要的 Spring Cloud Alibaba 依赖。</p>\n<p>访问 <a href=\"https://start.spring.io/\">Spring Initializr</a>，选择以下选项：</p>\n<ul>\n<li><strong>Project</strong>: Maven Project</li>\n<li><strong>Language</strong>: Java</li>\n<li><strong>Spring Boot</strong>: 选择稳定的版本，如 2.7.x</li>\n<li><strong>Group</strong>: com.example</li>\n<li><strong>Artifact</strong>: springcloud-demo</li>\n<li><strong>Name</strong>: springcloud-demo</li>\n<li><strong>Description</strong>: Spring Cloud 微服务项目</li>\n<li><strong>Packaging</strong>: Jar</li>\n<li><strong>Java Version</strong>: 11</li>\n</ul>\n<p>在 <strong>Dependencies</strong> 栏中，选择以下依赖：</p>\n<ul>\n<li>Spring Web</li>\n<li>Spring Cloud Discovery Client</li>\n<li>Nacos Discovery</li>\n<li>Spring Cloud Gateway</li>\n<li>Spring Boot DevTools</li>\n<li>Spring Cloud Alibaba Sentinel</li>\n</ul>\n<p>点击 <strong>Generate</strong> 下载项目。</p>\n<h2 id=\"2-2-导入项目\"><a href=\"#2-2-导入项目\" class=\"headerlink\" title=\"2.2 导入项目\"></a>2.2 导入项目</h2><p>将下载的项目解压并导入到 IDE 中，如 IntelliJ IDEA。</p>\n<h1 id=\"3-配置-Nacos-服务注册与发现\"><a href=\"#3-配置-Nacos-服务注册与发现\" class=\"headerlink\" title=\"3. 配置 Nacos 服务注册与发现\"></a>3. 配置 Nacos 服务注册与发现</h1><p>我们首先要让 Spring Cloud 项目能够通过 Nacos 实现服务注册与发现。</p>\n<h2 id=\"3-1-配置-application-yml\"><a href=\"#3-1-配置-application-yml\" class=\"headerlink\" title=\"3.1 配置 application.yml\"></a>3.1 配置 <code>application.yml</code></h2><p>在 <code>src/main/resources</code> 目录下创建或修改 <code>application.yml</code> 配置文件，配置 Nacos 服务地址：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">springcloud-demo</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\">    <span class=\"comment\"># 其他配置...</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-启动-Spring-Boot-应用\"><a href=\"#3-2-启动-Spring-Boot-应用\" class=\"headerlink\" title=\"3.2 启动 Spring Boot 应用\"></a>3.2 启动 Spring Boot 应用</h2><p>启动 <code>SpringcloudDemoApplication.java</code> 作为 Spring Boot 应用。项目启动后，它将自动注册到 Nacos 服务中心。你可以在 Nacos<br>控制台中查看已注册的服务。</p>\n<h1 id=\"4-使用-Dubbo-实现服务调用\"><a href=\"#4-使用-Dubbo-实现服务调用\" class=\"headerlink\" title=\"4. 使用 Dubbo 实现服务调用\"></a>4. 使用 Dubbo 实现服务调用</h1><p>Spring Cloud Alibaba 通过 Dubbo 提供了高效的 RPC 调用能力。我们将创建两个微服务，一个是提供服务的提供者（Provider），另一个是调用该服务的消费者（Consumer）。</p>\n<h2 id=\"4-1-引入-Dubbo-依赖\"><a href=\"#4-1-引入-Dubbo-依赖\" class=\"headerlink\" title=\"4.1 引入 Dubbo 依赖\"></a>4.1 引入 Dubbo 依赖</h2><p>在 <code>pom.xml</code> 中添加 Dubbo 相关依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.spring<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-dubbo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-创建-Provider-服务\"><a href=\"#4-2-创建-Provider-服务\" class=\"headerlink\" title=\"4.2 创建 Provider 服务\"></a>4.2 创建 Provider 服务</h2><p>创建 <code>ProviderController.java</code> 类，模拟提供服务的端点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springcloud.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.dubbo.config.annotation.DubboService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@DubboService</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProviderController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/provider&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">provide</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello from Provider!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-创建-Consumer-服务\"><a href=\"#4-3-创建-Consumer-服务\" class=\"headerlink\" title=\"4.3 创建 Consumer 服务\"></a>4.3 创建 Consumer 服务</h2><p>在 Consumer 微服务中，通过 Dubbo 调用 Provider 服务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springcloud.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.dubbo.config.annotation.DubboReference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DubboReference</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ProviderController providerController;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/consume&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">consume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> providerController.provide();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-配置-Sentinel-进行限流和熔断\"><a href=\"#5-配置-Sentinel-进行限流和熔断\" class=\"headerlink\" title=\"5. 配置 Sentinel 进行限流和熔断\"></a>5. 配置 Sentinel 进行限流和熔断</h1><p>Sentinel 是 Spring Cloud Alibaba 提供的一个流量控制组件，可以用于服务熔断、限流等场景。下面配置 Sentinel 来保护我们的服务。</p>\n<h2 id=\"5-1-启用-Sentinel\"><a href=\"#5-1-启用-Sentinel\" class=\"headerlink\" title=\"5.1 启用 Sentinel\"></a>5.1 启用 Sentinel</h2><p>在 <code>application.yml</code> 中加入以下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">      <span class=\"attr\">transport:</span></span><br><span class=\"line\">        <span class=\"attr\">dashboard:</span> <span class=\"string\">localhost:8080</span>  <span class=\"comment\"># Sentinel 控制台地址</span></span><br></pre></td></tr></table></figure>\n\n<p>启动 Sentinel 控制台：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Dserver.port=8080 -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure>\n\n<p>访问 Sentinel 控制台：<a href=\"http://localhost:8080/\">http://localhost:8080</a>。</p>\n<h2 id=\"5-2-配置熔断与限流规则\"><a href=\"#5-2-配置熔断与限流规则\" class=\"headerlink\" title=\"5.2 配置熔断与限流规则\"></a>5.2 配置熔断与限流规则</h2><p>你可以通过 Sentinel 控制台设置流量控制规则，限制请求速率或者设置熔断条件。</p>\n<h1 id=\"6-使用-Spring-Cloud-Gateway-实现-API-网关\"><a href=\"#6-使用-Spring-Cloud-Gateway-实现-API-网关\" class=\"headerlink\" title=\"6. 使用 Spring Cloud Gateway 实现 API 网关\"></a>6. 使用 Spring Cloud Gateway 实现 API 网关</h1><p>Spring Cloud Gateway 是一个强大的 API 网关，可以帮助我们进行负载均衡、路由转发等。我们将配置一个简单的路由来转发请求。</p>\n<h2 id=\"6-1-配置-application-yml\"><a href=\"#6-1-配置-application-yml\" class=\"headerlink\" title=\"6.1 配置 application.yml\"></a>6.1 配置 <code>application.yml</code></h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">provider_route</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://springcloud-demo-provider</span>  <span class=\"comment\"># 使用负载均衡请求 Provider</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/provider</span></span><br></pre></td></tr></table></figure>\n\n<p>该配置将所有访问 <code>/provider</code> 路径的请求转发到服务 <code>springcloud-demo-provider</code>。</p>\n<h1 id=\"7-总结\"><a href=\"#7-总结\" class=\"headerlink\" title=\"7. 总结\"></a>7. 总结</h1><p>通过本文，我们演示了如何使用 Spring Cloud Alibaba 搭建一个简单的 Spring Cloud 微服务架构。我们涉及了以下几个重要的功能：</p>\n<ul>\n<li><strong>服务注册与发现</strong>（通过 Nacos 实现）</li>\n<li><strong>服务调用</strong>（通过 Dubbo 实现）</li>\n<li><strong>限流与熔断</strong>（通过 Sentinel 实现）</li>\n<li><strong>API 网关</strong>（通过 Spring Cloud Gateway 实现）</li>\n</ul>\n<p>Spring Cloud Alibaba 提供了丰富的微服务解决方案，能够帮助我们更好地构建可扩展、可靠的分布式系统。如果你对 Spring Cloud<br>Alibaba 有兴趣，可以根据实际需求进一步探索其他组件和功能。</p>\n<p>如果你有任何问题或建议，欢迎在评论区留言，或者通过社交平台与我交流。</p>\n","feature":true,"text":"本文将详细介绍如何使用 Spring Cloud Alibaba 搭建一个分布式微服务架构，涵盖了服务注册与发现、配置管理、负载均衡、服务网关等常见功能。...","permalink":"/post/how-to-setup-spring-cloud-using-spring-cloud-alibaba","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"Spring Cloud","slug":"后端开发/Spring-Cloud","count":1,"path":"api/categories/后端开发/Spring-Cloud.json"},{"name":"微服务","slug":"后端开发/Spring-Cloud/微服务","count":1,"path":"api/categories/后端开发/Spring-Cloud/微服务.json"}],"tags":[{"name":"负载均衡","slug":"负载均衡","count":2,"path":"api/tags/负载均衡.json"},{"name":"Spring Cloud","slug":"Spring-Cloud","count":1,"path":"api/tags/Spring-Cloud.json"},{"name":"Spring Cloud Alibaba","slug":"Spring-Cloud-Alibaba","count":1,"path":"api/tags/Spring-Cloud-Alibaba.json"},{"name":"微服务","slug":"微服务","count":1,"path":"api/tags/微服务.json"},{"name":"服务注册与发现","slug":"服务注册与发现","count":1,"path":"api/tags/服务注册与发现.json"},{"name":"Nacos","slug":"Nacos","count":1,"path":"api/tags/Nacos.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">1. 环境准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E5%AE%89%E8%A3%85-JDK-%E5%92%8C-Maven\"><span class=\"toc-text\">1.1 安装 JDK 和 Maven</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E5%AE%89%E8%A3%85-Nacos\"><span class=\"toc-text\">1.2 安装 Nacos</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%88%9B%E5%BB%BA-Spring-Cloud-%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2. 创建 Spring Cloud 项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E4%BD%BF%E7%94%A8-Spring-Initializr-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2.1 使用 Spring Initializr 创建项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">2.2 导入项目</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E9%85%8D%E7%BD%AE-Nacos-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0\"><span class=\"toc-text\">3. 配置 Nacos 服务注册与发现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E9%85%8D%E7%BD%AE-application-yml\"><span class=\"toc-text\">3.1 配置 application.yml</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E5%90%AF%E5%8A%A8-Spring-Boot-%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">3.2 启动 Spring Boot 应用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8-Dubbo-%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">4. 使用 Dubbo 实现服务调用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-%E5%BC%95%E5%85%A5-Dubbo-%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">4.1 引入 Dubbo 依赖</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E5%88%9B%E5%BB%BA-Provider-%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">4.2 创建 Provider 服务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-%E5%88%9B%E5%BB%BA-Consumer-%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">4.3 创建 Consumer 服务</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-%E9%85%8D%E7%BD%AE-Sentinel-%E8%BF%9B%E8%A1%8C%E9%99%90%E6%B5%81%E5%92%8C%E7%86%94%E6%96%AD\"><span class=\"toc-text\">5. 配置 Sentinel 进行限流和熔断</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E5%90%AF%E7%94%A8-Sentinel\"><span class=\"toc-text\">5.1 启用 Sentinel</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E9%85%8D%E7%BD%AE%E7%86%94%E6%96%AD%E4%B8%8E%E9%99%90%E6%B5%81%E8%A7%84%E5%88%99\"><span class=\"toc-text\">5.2 配置熔断与限流规则</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E4%BD%BF%E7%94%A8-Spring-Cloud-Gateway-%E5%AE%9E%E7%8E%B0-API-%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">6. 使用 Spring Cloud Gateway 实现 API 网关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-1-%E9%85%8D%E7%BD%AE-application-yml\"><span class=\"toc-text\">6.1 配置 application.yml</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">7. 总结</span></a></li></ol>","author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"如何搭建一个简单的聊天室（基于 WebSocket）","uid":"b0b196b8cb2c43915438318c4df4a70f","slug":"building-a-chatroom-with-websocket","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/building-a-chatroom-with-websocket.json","keywords":null,"cover":"https://example.com/cover-images/chatroom.png","text":"本文将通过一步步的指导，教你如何使用 WebSocket 技术搭建一个简单的聊天室应用，包括客户端和服务器端的实现。...","permalink":"/post/building-a-chatroom-with-websocket","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"实时通信","slug":"后端开发/实时通信","count":2,"path":"api/categories/后端开发/实时通信.json"}],"tags":[{"name":"WebSocket","slug":"WebSocket","count":3,"path":"api/tags/WebSocket.json"},{"name":"聊天室","slug":"聊天室","count":1,"path":"api/tags/聊天室.json"},{"name":"实时通信","slug":"实时通信","count":3,"path":"api/tags/实时通信.json"},{"name":"Node.js","slug":"Node-js","count":1,"path":"api/tags/Node-js.json"},{"name":"JavaScript","slug":"JavaScript","count":1,"path":"api/tags/JavaScript.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"如何搭建一个 Spring Boot 项目","uid":"b5681646b03eac4279aa5143cd48c99a","slug":"how-to-setup-a-spring-boot-project","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/how-to-setup-a-spring-boot-project.json","keywords":null,"cover":"https://example.com/cover-images/spring-boot-setup.png","text":"本文详细介绍了如何从零开始搭建一个 Spring Boot 项目，包括环境配置、创建项目、编写代码和运行项目等步骤。...","permalink":"/post/how-to-setup-a-spring-boot-project","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"Spring Boot","slug":"后端开发/Spring-Boot","count":1,"path":"api/categories/后端开发/Spring-Boot.json"}],"tags":[{"name":"Java 开发","slug":"Java-开发","count":3,"path":"api/tags/Java-开发.json"},{"name":"构建工具","slug":"构建工具","count":2,"path":"api/tags/构建工具.json"},{"name":"Spring Boot","slug":"Spring-Boot","count":11,"path":"api/tags/Spring-Boot.json"},{"name":"项目搭建","slug":"项目搭建","count":1,"path":"api/tags/项目搭建.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true}}