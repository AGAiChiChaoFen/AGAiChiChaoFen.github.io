{"title":"理解 Java 中的方法引用","uid":"785bdfa89efa0a4fc0a5925a03bec7da","slug":"understanding-method-references-in-java","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/understanding-method-references-in-java.json","keywords":null,"cover":"https://example.com/cover-images/method-references-java.png","content":"<h3 id=\"理解-Java-中的方法引用\"><a href=\"#理解-Java-中的方法引用\" class=\"headerlink\" title=\"理解 Java 中的方法引用\"></a>理解 Java 中的方法引用</h3><p>Java 8 引入了 Lambda 表达式，使得函数式编程的概念得以引入 Java 语言。而在 Lambda 表达式的基础上，Java 还引入了 <strong>方法引用</strong>（Method Reference），它是 Lambda 表达式的一种简化形式。方法引用通过直接引用类或者实例的方法，使得代码更加简洁和易读。</p>\n<p>本文将详细讲解方法引用的概念、语法及其应用场景，并通过示例代码帮助大家深入理解。</p>\n<hr>\n<h3 id=\"1-什么是方法引用？\"><a href=\"#1-什么是方法引用？\" class=\"headerlink\" title=\"1. 什么是方法引用？\"></a>1. 什么是方法引用？</h3><p>方法引用是一种使用类或对象的方法来实现接口方法的方式。它让你能够直接引用已经定义的方法，而无需通过 Lambda 表达式来实现接口方法。</p>\n<p>方法引用的语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassName::methodName</span><br></pre></td></tr></table></figure>\n\n<p>其中，<code>ClassName</code> 是类名，<code>methodName</code> 是方法名。方法引用的背后依然是 Lambda 表达式，只不过它省略了 Lambda 表达式的主体部分。</p>\n<hr>\n<h3 id=\"2-方法引用的四种类型\"><a href=\"#2-方法引用的四种类型\" class=\"headerlink\" title=\"2. 方法引用的四种类型\"></a>2. 方法引用的四种类型</h3><p>Java 中的方法引用有四种常见的类型，分别对应不同的使用场景：</p>\n<h4 id=\"2-1-静态方法引用\"><a href=\"#2-1-静态方法引用\" class=\"headerlink\" title=\"2.1 静态方法引用\"></a>2.1 静态方法引用</h4><p>如果方法引用的是一个静态方法，可以使用以下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassName::staticMethodName</span><br></pre></td></tr></table></figure>\n\n<p>例如，假设我们有一个静态方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MathUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过方法引用来调用 <code>add</code> 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BiFunction&lt;Integer, Integer, Integer&gt; adder = MathUtils::add;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> adder.apply(<span class=\"number\">5</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// 输出 8</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-实例方法引用（通过对象）\"><a href=\"#2-2-实例方法引用（通过对象）\" class=\"headerlink\" title=\"2.2 实例方法引用（通过对象）\"></a>2.2 实例方法引用（通过对象）</h4><p>如果方法引用的是实例方法，可以使用以下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">instance::instanceMethodName</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Printer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以通过一个对象实例引用 <code>print</code> 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Printer</span> <span class=\"variable\">printer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Printer</span>();</span><br><span class=\"line\">Consumer&lt;String&gt; printerConsumer = printer::print;</span><br><span class=\"line\">printerConsumer.</span><br><span class=\"line\"></span><br><span class=\"line\">accept(<span class=\"string\">&quot;Hello, World!&quot;</span>);  <span class=\"comment\">// 输出 &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-类的实例方法引用（通过类的任意对象）\"><a href=\"#2-3-类的实例方法引用（通过类的任意对象）\" class=\"headerlink\" title=\"2.3 类的实例方法引用（通过类的任意对象）\"></a>2.3 类的实例方法引用（通过类的任意对象）</h4><p>你也可以通过类的任意对象来引用实例方法。这种方式适用于实例方法是操作类实例的情况，语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassName::instanceMethodName</span><br></pre></td></tr></table></figure>\n\n<p>例如，假设有一个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Converter</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">convert</span><span class=\"params\">(<span class=\"type\">int</span> number)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Converted: &quot;</span> + number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后使用 <code>Function</code> 来进行方法引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"type\">Converter</span> <span class=\"variable\">converter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Converter</span>();</span><br><span class=\"line\">Function&lt;Integer, String&gt; converterFunction = converter::convert;</span><br><span class=\"line\">numbers.</span><br><span class=\"line\"></span><br><span class=\"line\">stream().</span><br><span class=\"line\"></span><br><span class=\"line\">map(converterFunction).</span><br><span class=\"line\"></span><br><span class=\"line\">forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-构造器引用\"><a href=\"#2-4-构造器引用\" class=\"headerlink\" title=\"2.4 构造器引用\"></a>2.4 构造器引用</h4><p>如果方法引用指向的是类的构造器，可以使用以下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassName::<span class=\"keyword\">new</span></span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过构造器引用来创建 <code>Person</code> 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Supplier&lt;Person&gt; personSupplier = Person::<span class=\"keyword\">new</span>;</span><br><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> personSupplier.get();</span><br><span class=\"line\">person.name =<span class=\"string\">&quot;Alice&quot;</span>;</span><br><span class=\"line\">        System.out.</span><br><span class=\"line\"></span><br><span class=\"line\">println(person.getName());  <span class=\"comment\">// 输出 &quot;Alice&quot;</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-方法引用与-Lambda-表达式的比较\"><a href=\"#3-方法引用与-Lambda-表达式的比较\" class=\"headerlink\" title=\"3. 方法引用与 Lambda 表达式的比较\"></a>3. 方法引用与 Lambda 表达式的比较</h3><p>方法引用和 Lambda 表达式非常相似，它们都用于表示函数式接口的实现。其主要区别在于方法引用更加简洁，因为它不需要明确传递参数。</p>\n<p>假设我们有以下 Lambda 表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;cherry&quot;</span>);</span><br><span class=\"line\">list.</span><br><span class=\"line\"></span><br><span class=\"line\">forEach(item -&gt;System.out.</span><br><span class=\"line\"></span><br><span class=\"line\">println(item));</span><br></pre></td></tr></table></figure>\n\n<p>使用方法引用后，代码变得更加简洁：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>System.out::println</code> 是对 <code>System.out</code> 对象的 <code>println</code> 方法的引用，简化了 Lambda 表达式的写法。</p>\n<hr>\n<h3 id=\"4-使用方法引用的场景\"><a href=\"#4-使用方法引用的场景\" class=\"headerlink\" title=\"4. 使用方法引用的场景\"></a>4. 使用方法引用的场景</h3><h4 id=\"4-1-在集合操作中使用方法引用\"><a href=\"#4-1-在集合操作中使用方法引用\" class=\"headerlink\" title=\"4.1 在集合操作中使用方法引用\"></a>4.1 在集合操作中使用方法引用</h4><p>方法引用常常用在集合操作中，特别是在 <code>forEach</code>、<code>map</code>、<code>filter</code> 等流操作中。例如，假设我们有一个字符串列表，我们想要将所有字符串转换为大写并打印：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;cherry&quot;</span>);</span><br><span class=\"line\">list.</span><br><span class=\"line\"></span><br><span class=\"line\">stream()</span><br><span class=\"line\">    .</span><br><span class=\"line\"></span><br><span class=\"line\">map(String::toUpperCase)</span><br><span class=\"line\">    .</span><br><span class=\"line\"></span><br><span class=\"line\">forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中，<code>String::toUpperCase</code> 是一个实例方法引用，它替代了 Lambda 表达式 <code>str -&gt; str.toUpperCase()</code>。</p>\n<h4 id=\"4-2-排序时使用方法引用\"><a href=\"#4-2-排序时使用方法引用\" class=\"headerlink\" title=\"4.2 排序时使用方法引用\"></a>4.2 排序时使用方法引用</h4><p>如果你想排序一个对象列表，可以使用方法引用来简化排序代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; names = Arrays.asList(<span class=\"string\">&quot;Charlie&quot;</span>, <span class=\"string\">&quot;Alice&quot;</span>, <span class=\"string\">&quot;Bob&quot;</span>);</span><br><span class=\"line\">names.</span><br><span class=\"line\"></span><br><span class=\"line\">sort(String::compareTo);</span><br><span class=\"line\">names.</span><br><span class=\"line\"></span><br><span class=\"line\">forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>String::compareTo</code> 是一个静态方法引用，它替代了 Lambda 表达式 <code>s1, s2 -&gt; s1.compareTo(s2)</code>。</p>\n<hr>\n<h3 id=\"5-方法引用的优势\"><a href=\"#5-方法引用的优势\" class=\"headerlink\" title=\"5. 方法引用的优势\"></a>5. 方法引用的优势</h3><ol>\n<li><strong>简洁性</strong>：方法引用使代码更加简洁，减少了 Lambda 表达式中的冗余部分。</li>\n<li><strong>可读性</strong>：方法引用增强了代码的可读性，使得意图更加明确。</li>\n<li><strong>重用性</strong>：通过方法引用，你可以重用已经定义的方法，而不必重新实现。</li>\n</ol>\n<hr>\n<h3 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h3><p>方法引用是 Java 8 引入的一个强大特性，它使得 Java 代码更加简洁和易读。通过方法引用，你可以直接引用已经存在的方法，而不需要在<br>Lambda 表达式中重新定义它们。理解并合理使用方法引用，可以帮助你写出更简洁、更具可读性的 Java 代码。</p>\n<p>希望通过本文的讲解，您能更好地理解 Java 中的方法引用及其应用场景，在实际项目中提升开发效率。</p>\n","feature":true,"text":"本文深入讲解了 Java 中的方法引用的概念、语法以及使用场景，并通过实例说明了如何在日常开发中充分利用方法引用来简化代码。...","permalink":"/post/understanding-method-references-in-java","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"},{"name":"编程技巧","slug":"Java/编程技巧","count":1,"path":"api/categories/Java/编程技巧.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"函数式编程","slug":"函数式编程","count":2,"path":"api/tags/函数式编程.json"},{"name":"方法引用","slug":"方法引用","count":1,"path":"api/tags/方法引用.json"},{"name":"Lambda 表达式","slug":"Lambda-表达式","count":1,"path":"api/tags/Lambda-表达式.json"},{"name":"编程技巧","slug":"编程技巧","count":1,"path":"api/tags/编程技巧.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%90%86%E8%A7%A3-Java-%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">理解 Java 中的方法引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%9F\"><span class=\"toc-text\">1. 什么是方法引用？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">2. 方法引用的四种类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">2.1 静态方法引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%88%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%EF%BC%89\"><span class=\"toc-text\">2.2 实例方法引用（通过对象）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%88%E9%80%9A%E8%BF%87%E7%B1%BB%E7%9A%84%E4%BB%BB%E6%84%8F%E5%AF%B9%E8%B1%A1%EF%BC%89\"><span class=\"toc-text\">2.3 类的实例方法引用（通过类的任意对象）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-4-%E6%9E%84%E9%80%A0%E5%99%A8%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">2.4 构造器引用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E4%B8%8E-Lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">3. 方法引用与 Lambda 表达式的比较</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%9A%84%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">4. 使用方法引用的场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-%E5%9C%A8%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">4.1 在集合操作中使用方法引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-%E6%8E%92%E5%BA%8F%E6%97%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">4.2 排序时使用方法引用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">5. 方法引用的优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">6. 总结</span></a></li></ol>","author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"深入理解 CSS Grid 布局","uid":"40b9ee3e68f972bbfd2806143a7fbf93","slug":"understanding-css-grid-layout","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/understanding-css-grid-layout.json","keywords":null,"cover":"https://example.com/cover-images/css-grid-layout.png","text":"本文详细介绍了 CSS Grid 布局的使用方法及其实际应用，帮助开发者掌握这一现代布局技术，并提高网页设计的灵活性与响应性。...","permalink":"/post/understanding-css-grid-layout","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"前端开发","slug":"前端开发","count":4,"path":"api/categories/前端开发.json"},{"name":"CSS布局","slug":"前端开发/CSS布局","count":1,"path":"api/categories/前端开发/CSS布局.json"}],"tags":[{"name":"网页设计","slug":"网页设计","count":2,"path":"api/tags/网页设计.json"},{"name":"响应式设计","slug":"响应式设计","count":2,"path":"api/tags/响应式设计.json"},{"name":"CSS Grid","slug":"CSS-Grid","count":1,"path":"api/tags/CSS-Grid.json"},{"name":"布局技术","slug":"布局技术","count":1,"path":"api/tags/布局技术.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"深入理解 WebSocket 协议及其应用","uid":"bc86d0d7202390963a7b7815ca1de205","slug":"understanding-websocket","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/understanding-websocket.json","keywords":null,"cover":"https://example.com/cover-images/websocket.png","text":"本文将详细介绍 WebSocket 协议的基本概念、工作原理及应用场景，帮助开发者掌握如何在项目中使用 WebSocket 实现高效的实时通信。...","permalink":"/post/understanding-websocket","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"实时通信","slug":"后端开发/实时通信","count":2,"path":"api/categories/后端开发/实时通信.json"}],"tags":[{"name":"WebSocket","slug":"WebSocket","count":3,"path":"api/tags/WebSocket.json"},{"name":"实时通信","slug":"实时通信","count":3,"path":"api/tags/实时通信.json"},{"name":"网络协议","slug":"网络协议","count":2,"path":"api/tags/网络协议.json"},{"name":"前后端通信","slug":"前后端通信","count":1,"path":"api/tags/前后端通信.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true}}