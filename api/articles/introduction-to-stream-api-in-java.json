{"title":"Java Stream API 深入讲解","uid":"f304010a5f80df00d45a8b651ef611b2","slug":"introduction-to-stream-api-in-java","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/introduction-to-stream-api-in-java.json","keywords":null,"cover":"https://example.com/cover-images/java-stream-api.png","content":"<hr>\n<h3 id=\"Java-Stream-API-深入讲解\"><a href=\"#Java-Stream-API-深入讲解\" class=\"headerlink\" title=\"Java Stream API 深入讲解\"></a>Java Stream API 深入讲解</h3><p>Java 8 引入了 Stream API，这是一个强大的工具，可以帮助开发者以声明式的方式对集合进行操作。Stream 提供了一种更加简洁和高效的方式来处理数据，尤其是在处理大规模数据时。本文将深入讲解 Java Stream API，包括如何使用它进行集合数据处理，常见的操作方法，以及一些性能优化的技巧。</p>\n<hr>\n<h3 id=\"1-Stream-基础概念\"><a href=\"#1-Stream-基础概念\" class=\"headerlink\" title=\"1. Stream 基础概念\"></a>1. Stream 基础概念</h3><p>Stream 是 Java 8 引入的一个新特性，它代表了一个数据源（如集合、数组、I&#x2F;O 通道等）上的一条数据流，可以对其进行一系列的操作。Stream API 提供了对数据的高阶处理，允许开发者通过函数式编程风格编写清晰、简洁的代码。</p>\n<h4 id=\"1-1-Stream-的特点\"><a href=\"#1-1-Stream-的特点\" class=\"headerlink\" title=\"1.1 Stream 的特点\"></a>1.1 Stream 的特点</h4><ul>\n<li><strong>非存储</strong>：Stream 不存储数据，它们只是通过管道（pipeline）传递数据。</li>\n<li><strong>支持并行</strong>：Stream 提供了便捷的 API 来执行并行处理。</li>\n<li><strong>懒加载</strong>：Stream 的操作是懒加载的，只有在实际需要时才会进行计算。</li>\n</ul>\n<h4 id=\"1-2-Stream-操作的分类\"><a href=\"#1-2-Stream-操作的分类\" class=\"headerlink\" title=\"1.2 Stream 操作的分类\"></a>1.2 Stream 操作的分类</h4><ul>\n<li><strong>中间操作</strong>：返回一个新的 Stream，例如 <code>map()</code>、<code>filter()</code>、<code>distinct()</code> 等，执行这些操作时不会立即进行计算。</li>\n<li><strong>终止操作</strong>：触发流的计算并返回结果，例如 <code>collect()</code>、<code>forEach()</code>、<code>reduce()</code> 等，终止操作会导致流被消费。</li>\n</ul>\n<hr>\n<h3 id=\"2-如何创建-Stream\"><a href=\"#2-如何创建-Stream\" class=\"headerlink\" title=\"2. 如何创建 Stream\"></a>2. 如何创建 Stream</h3><p>Stream 可以从多种数据源创建，包括集合、数组、文件等。最常见的方式是通过集合来创建 Stream。</p>\n<h4 id=\"2-1-从集合创建-Stream\"><a href=\"#2-1-从集合创建-Stream\" class=\"headerlink\" title=\"2.1 从集合创建 Stream\"></a>2.1 从集合创建 Stream</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StreamExample</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = Arrays.asList(<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Pear&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 从集合创建 Stream</span></span><br><span class=\"line\">        Stream&lt;String&gt; stream = list.stream();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 使用 Stream 的方法进行操作</span></span><br><span class=\"line\">        stream.filter(s -&gt; s.startsWith(<span class=\"string\">&quot;A&quot;</span>))</span><br><span class=\"line\">              .forEach(System.out::println);  <span class=\"comment\">// 输出: Apple</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-从数组创建-Stream\"><a href=\"#2-2-从数组创建-Stream\" class=\"headerlink\" title=\"2.2 从数组创建 Stream\"></a>2.2 从数组创建 Stream</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StreamFromArray</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        String[] arr = &#123;<span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Pear&quot;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 从数组创建 Stream</span></span><br><span class=\"line\">        Stream&lt;String&gt; stream = Arrays.stream(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用 Stream 的方法进行操作</span></span><br><span class=\"line\">        stream.filter(s -&gt; s.contains(<span class=\"string\">&quot;a&quot;</span>))</span><br><span class=\"line\">                .forEach(System.out::println);  <span class=\"comment\">// 输出: Banana, Orange, Pear</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-从文件创建-Stream\"><a href=\"#2-3-从文件创建-Stream\" class=\"headerlink\" title=\"2.3 从文件创建 Stream\"></a>2.3 从文件创建 Stream</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StreamFromFile</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从文件创建 Stream</span></span><br><span class=\"line\">            Stream&lt;String&gt; stream = Files.lines(Paths.get(<span class=\"string\">&quot;data.txt&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 使用 Stream 的方法进行操作</span></span><br><span class=\"line\">            stream.filter(line -&gt; line.contains(<span class=\"string\">&quot;Java&quot;</span>))</span><br><span class=\"line\">                    .forEach(System.out::println);  <span class=\"comment\">// 输出包含 &quot;Java&quot; 的每一行</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-常见的-Stream-操作\"><a href=\"#3-常见的-Stream-操作\" class=\"headerlink\" title=\"3. 常见的 Stream 操作\"></a>3. 常见的 Stream 操作</h3><p>Stream API 提供了丰富的操作方法，可以对数据进行过滤、映射、排序、聚合等处理。</p>\n<h4 id=\"3-1-过滤操作-filter\"><a href=\"#3-1-过滤操作-filter\" class=\"headerlink\" title=\"3.1 过滤操作 filter()\"></a>3.1 过滤操作 <code>filter()</code></h4><p><code>filter()</code> 用于根据给定条件过滤流中的元素，返回符合条件的元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">numbers.</span><br><span class=\"line\"></span><br><span class=\"line\">stream()</span><br><span class=\"line\">       .</span><br><span class=\"line\"></span><br><span class=\"line\">filter(n -&gt;n %<span class=\"number\">2</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">        .</span><br><span class=\"line\"></span><br><span class=\"line\">forEach(System.out::println);  <span class=\"comment\">// 输出: 2, 4, 6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-2-映射操作-map\"><a href=\"#3-2-映射操作-map\" class=\"headerlink\" title=\"3.2 映射操作 map()\"></a>3.2 映射操作 <code>map()</code></h4><p><code>map()</code> 用于将流中的元素转换成另外一种类型或形式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; words = Arrays.asList(<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;python&quot;</span>, <span class=\"string\">&quot;javascript&quot;</span>);</span><br><span class=\"line\">words.</span><br><span class=\"line\"></span><br><span class=\"line\">stream()</span><br><span class=\"line\">     .</span><br><span class=\"line\"></span><br><span class=\"line\">map(String::toUpperCase)</span><br><span class=\"line\">     .</span><br><span class=\"line\"></span><br><span class=\"line\">forEach(System.out::println);  <span class=\"comment\">// 输出: JAVA, PYTHON, JAVASCRIPT</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-3-排序操作-sorted\"><a href=\"#3-3-排序操作-sorted\" class=\"headerlink\" title=\"3.3 排序操作 sorted()\"></a>3.3 排序操作 <code>sorted()</code></h4><p><code>sorted()</code> 用于对流中的元素进行排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">numbers.</span><br><span class=\"line\"></span><br><span class=\"line\">stream()</span><br><span class=\"line\">       .</span><br><span class=\"line\"></span><br><span class=\"line\">sorted()</span><br><span class=\"line\">       .</span><br><span class=\"line\"></span><br><span class=\"line\">forEach(System.out::println);  <span class=\"comment\">// 输出: 1, 2, 3, 5, 8</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-4-聚合操作-reduce\"><a href=\"#3-4-聚合操作-reduce\" class=\"headerlink\" title=\"3.4 聚合操作 reduce()\"></a>3.4 聚合操作 <code>reduce()</code></h4><p><code>reduce()</code> 用于将流中的元素反复结合起来，得到一个最终的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> numbers.stream()</span><br><span class=\"line\">        .reduce(<span class=\"number\">0</span>, (a, b) -&gt; a + b);  <span class=\"comment\">// 求和</span></span><br><span class=\"line\">System.out.</span><br><span class=\"line\"></span><br><span class=\"line\">println(sum);  <span class=\"comment\">// 输出: 15</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"4-并行流\"><a href=\"#4-并行流\" class=\"headerlink\" title=\"4. 并行流\"></a>4. 并行流</h3><p>Stream API 支持并行流，可以轻松地将处理任务并行化，提高性能。使用 <code>parallelStream()</code> 方法即可创建并行流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; numbers = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">numbers.</span><br><span class=\"line\"></span><br><span class=\"line\">parallelStream()</span><br><span class=\"line\">       .</span><br><span class=\"line\"></span><br><span class=\"line\">map(n -&gt;n *<span class=\"number\">2</span>)</span><br><span class=\"line\">        .</span><br><span class=\"line\"></span><br><span class=\"line\">forEach(System.out::println);</span><br></pre></td></tr></table></figure>\n\n<p>并行流适合于数据量较大的处理任务，可以显著提高性能，但也需要注意并行流的开销和线程安全问题。</p>\n<hr>\n<h3 id=\"5-性能优化\"><a href=\"#5-性能优化\" class=\"headerlink\" title=\"5. 性能优化\"></a>5. 性能优化</h3><p>虽然 Stream API 在简洁性和可读性上具有显著优势，但使用不当时可能带来性能上的损失。以下是一些优化建议：</p>\n<ul>\n<li><strong>避免不必要的中间操作</strong>：Stream 是懒加载的，但过多的中间操作仍会导致性能下降。</li>\n<li><strong>选择合适的并行操作</strong>：并行流适用于较大的数据集，不适合小数据集，因为它会有线程管理的开销。</li>\n<li><strong>避免共享可变状态</strong>：在使用并行流时，避免在操作中共享可变状态，以免引发线程安全问题。</li>\n</ul>\n<hr>\n<h3 id=\"6-小结\"><a href=\"#6-小结\" class=\"headerlink\" title=\"6. 小结\"></a>6. 小结</h3><p>Stream API 是 Java 8 中的重要特性，它为集合处理提供了更简洁和高效的方式。通过函数式编程风格，Stream<br>使得数据处理变得更加声明式、灵活和易于理解。无论是在执行简单的过滤、映射操作，还是在并行处理大规模数据时，Stream 都能够提供强大的支持。</p>\n<p>掌握 Stream API 可以使你的代码更加简洁和高效，尤其在处理集合、数组等数据时，能极大地提升开发效率并改善代码的可读性。</p>\n","feature":true,"text":"本文详细介绍了 Java 8 引入的 Stream API，通过简明的示例讲解了如何使用 Stream 进行集合数据的处理、转换和操作，探讨了常见的操作方法以及性能优化技巧。...","permalink":"/post/introduction-to-stream-api-in-java","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"},{"name":"Stream API","slug":"Java/Stream-API","count":1,"path":"api/categories/Java/Stream-API.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"Stream API","slug":"Stream-API","count":1,"path":"api/tags/Stream-API.json"},{"name":"函数式编程","slug":"函数式编程","count":2,"path":"api/tags/函数式编程.json"},{"name":"数据流处理","slug":"数据流处理","count":1,"path":"api/tags/数据流处理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-Stream-API-%E6%B7%B1%E5%85%A5%E8%AE%B2%E8%A7%A3\"><span class=\"toc-text\">Java Stream API 深入讲解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Stream-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1. Stream 基础概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-Stream-%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">1.1 Stream 的特点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-Stream-%E6%93%8D%E4%BD%9C%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">1.2 Stream 操作的分类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-Stream\"><span class=\"toc-text\">2. 如何创建 Stream</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-%E4%BB%8E%E9%9B%86%E5%90%88%E5%88%9B%E5%BB%BA-Stream\"><span class=\"toc-text\">2.1 从集合创建 Stream</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-2-%E4%BB%8E%E6%95%B0%E7%BB%84%E5%88%9B%E5%BB%BA-Stream\"><span class=\"toc-text\">2.2 从数组创建 Stream</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-%E4%BB%8E%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA-Stream\"><span class=\"toc-text\">2.3 从文件创建 Stream</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%B8%B8%E8%A7%81%E7%9A%84-Stream-%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3. 常见的 Stream 操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C-filter\"><span class=\"toc-text\">3.1 过滤操作 filter()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-2-%E6%98%A0%E5%B0%84%E6%93%8D%E4%BD%9C-map\"><span class=\"toc-text\">3.2 映射操作 map()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-3-%E6%8E%92%E5%BA%8F%E6%93%8D%E4%BD%9C-sorted\"><span class=\"toc-text\">3.3 排序操作 sorted()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-4-%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C-reduce\"><span class=\"toc-text\">3.4 聚合操作 reduce()</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%B9%B6%E8%A1%8C%E6%B5%81\"><span class=\"toc-text\">4. 并行流</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">5. 性能优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">6. 小结</span></a></li></ol>","author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Java 网络编程入门指南","uid":"160bd7168fb982c41a27f025fa85802f","slug":"introduction-to-network-programming-in-java","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/introduction-to-network-programming-in-java.json","keywords":null,"cover":"https://example.com/cover-images/network-programming-java.png","text":"本文介绍了 Java 网络编程的基本概念、常用的网络通信协议以及如何使用 Java 构建客户端和服务器应用程序，并通过实例展示如何进行基本的 Socket 编程。...","permalink":"/post/introduction-to-network-programming-in-java","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"},{"name":"网络编程","slug":"Java/网络编程","count":1,"path":"api/categories/Java/网络编程.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"网络编程","slug":"网络编程","count":1,"path":"api/tags/网络编程.json"},{"name":"Socket编程","slug":"Socket编程","count":1,"path":"api/tags/Socket编程.json"},{"name":"客户端-服务器模型","slug":"客户端-服务器模型","count":1,"path":"api/tags/客户端-服务器模型.json"},{"name":"网络通信","slug":"网络通信","count":1,"path":"api/tags/网络通信.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"Java职业发展路线：从入门到专家的成长之路","uid":"b48243238c01ee305ea66d049bb4e9bf","slug":"java-career-path-guide","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/java-career-path-guide.json","keywords":null,"cover":"https://example.com/cover-images/java-career-path.png","text":"本文介绍了Java开发者的职业发展路径，从初学者到高级开发者，再到架构师的成长路线，涵盖了学习资源、技能提升及职业规划建议。...","permalink":"/post/java-career-path-guide","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Java开发","slug":"Java开发","count":2,"path":"api/categories/Java开发.json"},{"name":"职业发展","slug":"Java开发/职业发展","count":1,"path":"api/categories/Java开发/职业发展.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"编程","slug":"编程","count":2,"path":"api/tags/编程.json"},{"name":"职业规划","slug":"职业规划","count":1,"path":"api/tags/职业规划.json"},{"name":"技能提升","slug":"技能提升","count":1,"path":"api/tags/技能提升.json"},{"name":"开发者成长","slug":"开发者成长","count":1,"path":"api/tags/开发者成长.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true}}