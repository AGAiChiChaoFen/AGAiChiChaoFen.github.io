{"title":"基于Spring Boot与Vue.js实现完整的用户认证与授权系统","uid":"28ffae9a33ce006917ae81ba1754fba4","slug":"spring-boot-vue-jwt-authentication","date":"2024-01-30T16:00:00.000Z","updated":"2024-01-30T16:00:00.000Z","comments":true,"path":"api/articles/spring-boot-vue-jwt-authentication.json","keywords":null,"cover":"https://example.com/cover-images/authentication-system.png","content":"<h1 id=\"基于Spring-Boot与Vue-js实现完整的用户认证与授权系统\"><a href=\"#基于Spring-Boot与Vue-js实现完整的用户认证与授权系统\" class=\"headerlink\" title=\"基于Spring Boot与Vue.js实现完整的用户认证与授权系统\"></a>基于Spring Boot与Vue.js实现完整的用户认证与授权系统</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>随着Web应用的不断发展，用户认证与授权已经成为开发中的重要环节。Spring Boot与Vue.js的组合在现代Web开发中非常常见，特别是它们结合JWT（JSON<br>Web Token）可以实现非常灵活的认证与授权机制。本文将介绍如何使用Spring<br>Boot与Vue.js构建一个完整的用户认证与授权系统，包括用户注册、登录、JWT认证、角色权限管理等功能的实现。</p>\n<h2 id=\"1-项目架构\"><a href=\"#1-项目架构\" class=\"headerlink\" title=\"1. 项目架构\"></a>1. 项目架构</h2><p>本项目的架构图如下所示：</p>\n<p><img src=\"https://example.com/cover-images/authentication-system.png\" alt=\"用户认证与授权系统架构\"></p>\n<h3 id=\"1-1-技术栈\"><a href=\"#1-1-技术栈\" class=\"headerlink\" title=\"1.1 技术栈\"></a>1.1 技术栈</h3><p>本项目的技术栈包括：</p>\n<ul>\n<li><strong>Java 11</strong>：后端使用Java语言开发。</li>\n<li><strong>Spring Boot 2.7</strong>：构建后端应用程序，处理业务逻辑。</li>\n<li><strong>Spring Security</strong>：处理安全性、用户认证与授权。</li>\n<li><strong>JWT 3.0</strong>：使用JSON Web Token进行认证。</li>\n<li><strong>Vue 3</strong>：前端使用Vue.js框架，响应式展示用户界面。</li>\n<li><strong>Axios 1.3</strong>：用于前端发起HTTP请求，获取后端数据。</li>\n</ul>\n<h2 id=\"2-Spring-Boot-后端开发\"><a href=\"#2-Spring-Boot-后端开发\" class=\"headerlink\" title=\"2. Spring Boot 后端开发\"></a>2. Spring Boot 后端开发</h2><h3 id=\"2-1-配置Spring-Security\"><a href=\"#2-1-配置Spring-Security\" class=\"headerlink\" title=\"2.1 配置Spring Security\"></a>2.1 配置Spring Security</h3><p>Spring Security是Spring框架中用于处理安全性的模块，它提供了强大的认证与授权功能。在本系统中，我们将使用Spring<br>Security来进行用户认证。</p>\n<p>首先，添加Spring Security依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-JWT生成与解析\"><a href=\"#2-2-JWT生成与解析\" class=\"headerlink\" title=\"2.2 JWT生成与解析\"></a>2.2 JWT生成与解析</h3><p>为了实现基于JWT的认证，我们首先需要创建JWT工具类，负责生成和解析JWT令牌。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtUtil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">secretKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mysecretkey&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">generateToken</span><span class=\"params\">(String username)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Jwts.builder()</span><br><span class=\"line\">                .setSubject(username)</span><br><span class=\"line\">                .setIssuedAt(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())</span><br><span class=\"line\">                .setExpiration(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(System.currentTimeMillis() + <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>))  <span class=\"comment\">// 1天有效期</span></span><br><span class=\"line\">                .signWith(SignatureAlgorithm.HS256, secretKey)</span><br><span class=\"line\">                .compact();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Claims <span class=\"title function_\">extractClaims</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Jwts.parser()</span><br><span class=\"line\">                .setSigningKey(secretKey)</span><br><span class=\"line\">                .parseClaimsJws(token)</span><br><span class=\"line\">                .getBody();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">extractUsername</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> extractClaims(token).getSubject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTokenExpired</span><span class=\"params\">(String token)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> extractClaims(token).getExpiration().before(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">validateToken</span><span class=\"params\">(String token, String username)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (username.equals(extractUsername(token)) &amp;&amp; !isTokenExpired(token));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-配置Spring-Security过滤器\"><a href=\"#2-3-配置Spring-Security过滤器\" class=\"headerlink\" title=\"2.3 配置Spring Security过滤器\"></a>2.3 配置Spring Security过滤器</h3><p>为了保护敏感API，我们需要自定义Spring Security过滤器，验证JWT令牌的有效性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JwtRequestFilter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> JwtUtil jwtUtil;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> UserDetailsService userDetailsService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">JwtRequestFilter</span><span class=\"params\">(JwtUtil jwtUtil, UserDetailsService userDetailsService)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jwtUtil = jwtUtil;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userDetailsService = userDetailsService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;Authorization&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token != <span class=\"literal\">null</span> &amp;&amp; token.startsWith(<span class=\"string\">&quot;Bearer &quot;</span>)) &#123;</span><br><span class=\"line\">            token = token.substring(<span class=\"number\">7</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> jwtUtil.extractUsername(token);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (username != <span class=\"literal\">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">UserDetails</span> <span class=\"variable\">userDetails</span> <span class=\"operator\">=</span> userDetailsService.loadUserByUsername(username);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (jwtUtil.validateToken(token, username)) &#123;</span><br><span class=\"line\">                    <span class=\"type\">UsernamePasswordAuthenticationToken</span> <span class=\"variable\">authentication</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                            <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordAuthenticationToken</span>(userDetails, <span class=\"literal\">null</span>, userDetails.getAuthorities());</span><br><span class=\"line\">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        chain.doFilter(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-用户注册与登录\"><a href=\"#2-4-用户注册与登录\" class=\"headerlink\" title=\"2.4 用户注册与登录\"></a>2.4 用户注册与登录</h3><p>接下来，我们需要提供用户注册与登录的API。首先是注册接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/register&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;?&gt; registerUser(<span class=\"meta\">@RequestBody</span> User user) &#123;</span><br><span class=\"line\">        userService.saveUser(user);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseEntity.ok(<span class=\"string\">&quot;User registered successfully&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/login&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;?&gt; loginUser(<span class=\"meta\">@RequestBody</span> LoginRequest loginRequest) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> userService.authenticateUser(loginRequest.getUsername(), loginRequest.getPassword());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResponseEntity.ok(<span class=\"keyword\">new</span> <span class=\"title class_\">JwtResponse</span>(token));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>loginUser</code>方法中，我们通过用户名和密码生成JWT令牌。</p>\n<h2 id=\"3-Vue-js-前端开发\"><a href=\"#3-Vue-js-前端开发\" class=\"headerlink\" title=\"3. Vue.js 前端开发\"></a>3. Vue.js 前端开发</h2><h3 id=\"3-1-创建Vue项目\"><a href=\"#3-1-创建Vue项目\" class=\"headerlink\" title=\"3.1 创建Vue项目\"></a>3.1 创建Vue项目</h3><p>使用Vue CLI创建一个新的Vue项目，并安装Axios库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-登录与注册页面\"><a href=\"#3-2-登录与注册页面\" class=\"headerlink\" title=\"3.2 登录与注册页面\"></a>3.2 登录与注册页面</h3><p>在Vue组件中，我们将使用Axios向Spring Boot后端发起请求，进行用户登录和注册。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;form @submit.prevent=&quot;loginUser&quot;&gt;</span><br><span class=\"line\">      &lt;input v-model=&quot;username&quot; placeholder=&quot;Username&quot; required/&gt;</span><br><span class=\"line\">      &lt;input type=&quot;password&quot; v-model=&quot;password&quot; placeholder=&quot;Password&quot; required/&gt;</span><br><span class=\"line\">      &lt;button type=&quot;submit&quot;&gt;Login&lt;/button&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  import axios from &#x27;axios&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        username: &#x27;&#x27;,</span><br><span class=\"line\">        password: &#x27;&#x27;,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      loginUser() &#123;</span><br><span class=\"line\">        axios.post(&#x27;http://localhost:8080/auth/login&#x27;, &#123;</span><br><span class=\"line\">          username: this.username,</span><br><span class=\"line\">          password: this.password</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">            .then(response =&gt; &#123;</span><br><span class=\"line\">              localStorage.setItem(&#x27;token&#x27;, response.data.token);</span><br><span class=\"line\">              this.$router.push(&#x27;/dashboard&#x27;);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .catch(error =&gt; &#123;</span><br><span class=\"line\">              console.error(&quot;Login failed&quot;, error);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-请求拦截器与JWT存储\"><a href=\"#3-3-请求拦截器与JWT存储\" class=\"headerlink\" title=\"3.3 请求拦截器与JWT存储\"></a>3.3 请求拦截器与JWT存储</h3><p>我们使用Axios拦截器将JWT令牌添加到每个请求的头部。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\">axios.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(<span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;token&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token) &#123;</span><br><span class=\"line\">        config.<span class=\"property\">headers</span>.<span class=\"property\">Authorization</span> = <span class=\"string\">`Bearer <span class=\"subst\">$&#123;token&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-角色权限管理\"><a href=\"#4-角色权限管理\" class=\"headerlink\" title=\"4. 角色权限管理\"></a>4. 角色权限管理</h2><h3 id=\"4-1-Spring-Security角色配置\"><a href=\"#4-1-Spring-Security角色配置\" class=\"headerlink\" title=\"4.1 Spring Security角色配置\"></a>4.1 Spring Security角色配置</h3><p>在Spring Security配置类中添加基于角色的访问控制：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http.csrf().disable()</span><br><span class=\"line\">                .authorizeRequests()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/auth/**&quot;</span>).permitAll()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/admin/**&quot;</span>).hasRole(<span class=\"string\">&quot;ADMIN&quot;</span>)</span><br><span class=\"line\">                .anyRequest().authenticated()</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-Vue前端权限控制\"><a href=\"#4-2-Vue前端权限控制\" class=\"headerlink\" title=\"4.2 Vue前端权限控制\"></a>4.2 Vue前端权限控制</h3><p>在Vue路由中实现导航守卫进行权限校验：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// router.js</span></span><br><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;token&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> requiresAuth = to.<span class=\"property\">matched</span>.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">record</span> =&gt;</span> record.<span class=\"property\">meta</span>.<span class=\"property\">requiresAuth</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requiresAuth &amp;&amp; !token) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>(<span class=\"string\">&#x27;/login&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><p>通过本文的讲解，我们了解了如何在Spring Boot和Vue.js之间实现一个完整的用户认证与授权系统。Spring<br>Boot后端使用JWT进行认证，前端通过Axios发起请求并处理响应。Spring Security提供了强大的安全机制，使得应用程序能够更加安全可靠。</p>\n<p>这种基于JWT的认证方式使得我们可以轻松地扩展角色权限管理、令牌刷新等功能，同时提升了系统的安全性和可维护性。<br><strong>小提示</strong><br>在生产环境中，记得使用更强的加密算法生成JWT密钥，并定期轮换密钥以确保系统的安全性。</p>\n<pre><code>\n修复说明：\n1. 移除了突然出现的Java设计模式相关内容（第3节之后错误插入的部分）\n2. 补全了前端权限控制章节（4.2节）\n3. 优化了代码示例格式和文档结构\n4. 补充了路由守卫和权限校验实现\n5. 添加了生产环境安全建议提示框\n\n该文档现在完整展示了从Spring Boot后端到Vue前端的全流程认证系统实现，保持了技术路线的连贯性和完整性。\n</code></pre>\n","feature":true,"text":"本文将介绍如何使用Spring Boot与Vue.js构建一个完整的用户认证与授权系统，包括用户注册、登录、JWT认证、角色权限管理等功能的实现。...","permalink":"/post/spring-boot-vue-jwt-authentication","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"全栈开发","slug":"全栈开发","count":2,"path":"api/categories/全栈开发.json"},{"name":"安全性","slug":"全栈开发/安全性","count":1,"path":"api/categories/全栈开发/安全性.json"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","count":11,"path":"api/tags/Spring-Boot.json"},{"name":"安全性","slug":"安全性","count":2,"path":"api/tags/安全性.json"},{"name":"JWT","slug":"JWT","count":2,"path":"api/tags/JWT.json"},{"name":"Vue.js","slug":"Vue-js","count":2,"path":"api/tags/Vue-js.json"},{"name":"用户认证","slug":"用户认证","count":1,"path":"api/tags/用户认证.json"},{"name":"角色权限管理","slug":"角色权限管理","count":1,"path":"api/tags/角色权限管理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8ESpring-Boot%E4%B8%8EVue-js%E5%AE%9E%E7%8E%B0%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">基于Spring Boot与Vue.js实现完整的用户认证与授权系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E8%A8%80\"><span class=\"toc-text\">引言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">1. 项目架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E6%8A%80%E6%9C%AF%E6%A0%88\"><span class=\"toc-text\">1.1 技术栈</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Spring-Boot-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">2. Spring Boot 后端开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E9%85%8D%E7%BD%AESpring-Security\"><span class=\"toc-text\">2.1 配置Spring Security</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-JWT%E7%94%9F%E6%88%90%E4%B8%8E%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">2.2 JWT生成与解析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E9%85%8D%E7%BD%AESpring-Security%E8%BF%87%E6%BB%A4%E5%99%A8\"><span class=\"toc-text\">2.3 配置Spring Security过滤器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E4%B8%8E%E7%99%BB%E5%BD%95\"><span class=\"toc-text\">2.4 用户注册与登录</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Vue-js-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">3. Vue.js 前端开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">3.1 创建Vue项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">3.2 登录与注册页面</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8EJWT%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">3.3 请求拦截器与JWT存储</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E8%A7%92%E8%89%B2%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">4. 角色权限管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-Spring-Security%E8%A7%92%E8%89%B2%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">4.1 Spring Security角色配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-Vue%E5%89%8D%E7%AB%AF%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">4.2 Vue前端权限控制</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5. 总结</span></a></li></ol></li></ol>","author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Vue 性能优化实战","uid":"df0bd55bf5dabc088a34e9fd3d181652","slug":"vue-performance-optimization","date":"2024-02-01T16:00:00.000Z","updated":"2024-02-01T16:00:00.000Z","comments":true,"path":"api/articles/vue-performance-optimization.json","keywords":null,"cover":"https://example.com/cover-images/vue-performance.png","text":"本文深入探讨了在 Vue.js 项目中如何优化性能，涵盖了组件懒加载、虚拟滚动、避免不必要的重渲染等技巧，并提供了具体的代码示例。...","permalink":"/post/vue-performance-optimization","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"前端开发","slug":"前端开发","count":4,"path":"api/categories/前端开发.json"},{"name":"性能优化","slug":"前端开发/性能优化","count":2,"path":"api/categories/前端开发/性能优化.json"}],"tags":[{"name":"性能优化","slug":"性能优化","count":7,"path":"api/tags/性能优化.json"},{"name":"Vue.js","slug":"Vue-js","count":2,"path":"api/tags/Vue-js.json"},{"name":"组件懒加载","slug":"组件懒加载","count":1,"path":"api/tags/组件懒加载.json"},{"name":"虚拟滚动","slug":"虚拟滚动","count":1,"path":"api/tags/虚拟滚动.json"},{"name":"重渲染","slug":"重渲染","count":1,"path":"api/tags/重渲染.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true},"next_post":{"title":"Spring Boot性能优化与最佳实践","uid":"480c3db8fc24ba125bf56f7e20566f0a","slug":"spring-boot-performance-optimization","date":"2024-01-24T16:00:00.000Z","updated":"2024-01-31T16:00:00.000Z","comments":true,"path":"api/articles/spring-boot-performance-optimization.json","keywords":null,"cover":"https://example.com/cover-images/spring-boot-performance.png","text":"本文深入分析了如何优化Spring Boot应用的性能，涵盖了数据库优化、缓存策略、线程池管理等方面的最佳实践，并提供了详细的性能调优技巧。...","permalink":"/post/spring-boot-performance-optimization","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":14,"path":"api/categories/后端开发.json"},{"name":"性能优化","slug":"后端开发/性能优化","count":6,"path":"api/categories/后端开发/性能优化.json"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","count":11,"path":"api/tags/Spring-Boot.json"},{"name":"性能优化","slug":"性能优化","count":7,"path":"api/tags/性能优化.json"},{"name":"异步处理","slug":"异步处理","count":3,"path":"api/tags/异步处理.json"},{"name":"数据库优化","slug":"数据库优化","count":3,"path":"api/tags/数据库优化.json"},{"name":"缓存策略","slug":"缓存策略","count":5,"path":"api/tags/缓存策略.json"},{"name":"JVM调优","slug":"JVM调优","count":3,"path":"api/tags/JVM调优.json"},{"name":"线程池管理","slug":"线程池管理","count":2,"path":"api/tags/线程池管理.json"}],"author":{"name":"广","slug":"blog-author","avatar":"https://sky-take-out-agaichichaofen.oss-cn-wuhan-lr.aliyuncs.com/qq%E5%A4%B4%E5%83%8F.jpg","link":"/","description":"啊广的读书交流自习室","socials":{"github":"https://github.com/AGAiChiChaoFen","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://www.weibo.com/u/5348126242","zhihu":"https://www.zhihu.com/people/wei-xin-yong-hu-92-31-83-82","csdn":"https://blog.csdn.net/m0_74151385?spm=1000.2115.3001.5343","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/501025927?spm_id_from=333.1007.0.0"}}}},"feature":true}}